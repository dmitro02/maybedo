{"version":3,"sources":["classes/Task.ts","components/Fog/Fog.tsx","components/Statuses/Spinner.tsx","services/localStorageService.ts","utils/commonUtils.ts","classes/Syncer.ts","classes/Metadata.ts","services/taskService.ts","classes/DropboxClient.ts","classes/DropboxConnector.ts","components/Statuses/SyncStatus.tsx","classes/Store.ts","classes/StoreFactory.ts","components/Statuses/Loading.tsx","components/Banner/Banner.tsx","utils/customHooks.ts","components/Record/AddRecord.tsx","components/Buttons/CheckmarkButton.tsx","components/RecordMenu/DeleteRecords.tsx","components/RecordMenu/Priority.tsx","components/RecordMenu/AddSubtask.tsx","components/RecordMenu/RecordMenu.tsx","components/Record/Editable.tsx","components/Record/Record.tsx","components/RecordList/Title.tsx","components/RecordList/RecordList.tsx","components/Sidebar/Sidebar.tsx","version.js","components/Settings/ExportImport.tsx","components/Buttons/MenuButton.tsx","HOCs/Portal.tsx","HOCs/withModal.tsx","components/Buttons/Button.tsx","components/Settings/ImportModal.tsx","components/Settings/DropboxSettings.tsx","components/Settings/SyncSettings.tsx","components/Settings/Settings.tsx","components/MainContainer/Content.tsx","components/MainContainer/MainContainer.tsx","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["Priorities","Fog","props","isDisplayed","className","style","display","Spinner","customClass","METADATA_KEY","SELECTED_PROJECT_ID_KEY","SETTINGS_KEY","TOKENS_KEY","hasItem","key","localStorage","getItem","getObject","JSON","parse","setObject","obj","setItem","stringify","setSelectedProjectId","id","getSettings","getSyncTarget","syncTarget","setSyncTarget","getTokens","setDropboxToken","dropboxAccessToken","readFile","blob","Promise","resolve","reject","fr","FileReader","onerror","onload","result","readAsText","generateId","length","Math","floor","random","toString","substring","SyncTargets","Task","text","isDone","priority","updatedAt","parentId","subTasks","Trivial","Date","now","this","ROOT_ID","Metadata","taskList","created","deleted","updated","item","p","u","push","includes","filter","it","isRoot","addToTaskList","addToCreated","save","removeFromTaskList","removeFromCreated","addToDeleted","getAllTaskIds","reduce","acc","curr","Object","values","some","taskId","taskMetaRecord","keys","metadata","ls","restore","hasRoot","getTask","getTaskList","taskIds","getSubTasksList","childrenIds","getChildrenIds","getTasksTree","root","addSubTasks","parent","forEach","task","createTask","registerCreated","createTasks","tasks","deleteTask","isProject","store","selectedProjectId","removeItem","registerDeleted","TOKEN_URL","DropboxClient","clientId","codeVerifier","dropbox","initDropbox","validateConfiguration","checkUser","query","authorizationCode","body","URLSearchParams","code","grant_type","client_id","code_verifier","fetch","method","headers","response","json","resData","ok","Error","error_description","accessToken","access_token","path","filesListFolder","filesDownload","contents","filesUpload","mode","filesDeleteV2","token","Dropbox","DATA_FOLDER_PATH","METADATA_FILE_PATH","DropboxConnector","dropboxClient","authorize","check","names","files","name","downloadFile","fileBlob","fileContent","isFileNotFound","file","uploadFile","deleteFile","e","error","error_summary","authUrl","isConfigured","SyncStatuses","syncer","cloudConnector","isSyncFaild","interval","processChanges","local","remote","localList","remoteList","hasOwnProperty","remoteUpdatedAt","localUpdatedAt","addToUpdated","syncChanges","a","toDownload","concat","toUpload","toDeleteLocal","toDeleteRemote","isRemoteModified","isLocalModified","downloadItems","items","taskService","filesToUpload","map","uploadItems","deleteItems","reset","reload","uploadRemoteMeta","metaLocal","Disabled","createCloudConnector","clearInterval","sync","setInterval","bind","syncStatus","InProgress","fetchRemoteMeta","metaRemote","console","Failure","Idle","message","toLowerCase","NotConfigured","downloadMetadata","taskListStr","uploadMetadata","SyncStatus","usePropertyWithState","status","refresh","baseClass","noHoverClass","title","onClick","getStatusElement","init","initRoot","Events","initSelectProjectId","getProjectsList","initialValue","subsciptions","Map","notify","eventOrProperty","value","get","callback","Proxy","set","target","property","useSubscribe","useEffect","callbacks","subscribe","newCallbacks","unsubscribe","useEvent","eventName","useProperty","useState","state","setState","useReload","createStore","showLoading","banner","BannerTypes","Loading","spinnerClass","useOutsideClickDetector","ref","action","isEnabled","handleClickOutside","current","contains","document","addEventListener","removeEventListener","AddRecord","add","contentEditable","suppressContentEditableWarning","onInput","textContent","trim","onKeyPress","preventEnterOnEmpty","preventDefault","memo","CheckmarkButton","actionOnClick","isChecked","classes","join","DeleteRecords","isBulk","isDisabled","closeMenu","remove","showDeleteConfirmation","setShowDeleteConfirmation","closeDeleteConfirmation","stopPropagation","confirmRef","useRef","configSingle","icon","tooltip","deleteAction","configBulk","DeleteCompleted","classNames","PRIORITY_NAMES","Minor","Normal","Major","Critical","undefined","Priority","update","showSelector","setShowSelector","switchRef","el","parseInt","AddSubtask","showSubtasks","RecordMenu","closeTimeout","isTitle","showMenu","setShowMenu","menuRef","onMouseLeave","setTimeout","onMouseEnter","clearTimeout","debounceInput","timeout","innerHTML","setCaretPosition","pos","range","createRange","selection","window","getSelection","elContentNode","childNodes","textLength","positionNormalized","min","setStart","collapse","removeAllRanges","addRange","Editable","isEditable","getFocus","isSingleLine","editableRef","setContentEditable","focus","flag","setAttribute","handleInput","onBlur","Record","isSelected","isFocused","hasSubtasks","hasChildren","setShowSubtasks","SetProjectByTitle","recordClassName","hiddenBtnClassName","iAmRunningOnMobile","openSubtasks","closeSubtasks","button","SetTitleByProject","getSubtasksBtn","rootId","Title","setTitle","RecordList","hasTitle","projectId","setRoot","setSubTasks","setData","focusedItemId","isRootList","updateSubTask","newSubTasks","registerUpdated","updateTask","deleteSubTask","isSelectedPojectDeleted","idsToDelete","sort","b","pa","pb","activeTasks","t","completedTasks","activeItemListRef","Sidebar","isOpened","close","isSettingsOpened","leftPanelRef","getAttribute","Banner","setBanner","delay","type","DataTypes","FailureBanner","SuccessBanner","Success","MenuButton","Portal","children","mountPoint","getElementById","createElement","appendChild","removeChild","createPortal","withModal","WrapedComponent","Button","isOutlined","forwardRef","onConfirm","onCancel","cancelRef","doExport","data","dataToExport","encodedUri","encodeURI","link","getExportFileName","click","exportDataAsJson","convertDataToJsonString","exportDataAsHtml","taskTree","content","convertDataToHtmlString","HTML","timestamp","toISOString","textDecoration","subTasksHtml","replace","ExportImport","showModal","setShowModal","backToTaskList","fileInputRef","dataType","doImport","clearFileInput","onChange","toUpperCase","accept","DropboxSettings","dbx","authTokenRef","authorizeApp","open","size","placeholder","SyncSettings","setSynStatus","isSelectDisabled","disabled","getTargetSettingsElement","Settings","Content","isSidebarOpened","openSidebar","toggleSettings","MainContainer","setIsSettingsOpened","setIsSidebarOpened","closeSidebar","navigator","maxTouchPoints","msMaxTouchPoints","mQ","matchMedia","media","matches","test","userAgent","isMobile","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","URL","process","href","origin","contentType","indexOf","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.3f855fa0.chunk.js","sourcesContent":["import { generateId } from '../utils/commonUtils';\r\n\r\nexport enum Priorities {\r\n    Trivial,\r\n    Minor,\r\n    Normal,\r\n    Major,\r\n    Critical\r\n}\r\n\r\nexport default class Task {\r\n    text: string\r\n    isDone: boolean\r\n    priority: Priorities\r\n    id: string\r\n    updatedAt: number\r\n    parentId: string | null\r\n    subTasks?: Task[] // for getting tasksTree for HTML export\r\n\r\n    constructor(props: any = {}) {\r\n        const {\r\n            id = generateId(), \r\n            text = '', \r\n            isDone = false, \r\n            priority = Priorities.Trivial, \r\n            updatedAt = Date.now(),\r\n            parentId = null\r\n        } = props\r\n\r\n        this.id = id\r\n        this.text = text\r\n        this.isDone = isDone\r\n        this.priority = priority\r\n        this.updatedAt = updatedAt\r\n        this.parentId = parentId\r\n    }\r\n}\r\n","import './Fog.scss'\r\n\r\ntype Props = {\r\n    isDisplayed: Boolean\r\n}\r\n\r\nconst Fog = (props: Props) => {\r\n    const { isDisplayed = false } = props\r\n\r\n    return <div className=\"fog\" style={{display: isDisplayed ? 'block' : 'none'}}/>\r\n}\r\n\r\nexport default Fog","import './Spinner.scss'\r\n\r\ntype Props = {\r\n    customClass?: string\r\n}\r\n\r\nconst Spinner = (props: Props) =>\r\n    <div className={`spinner ${props.customClass || ''}`} />\r\n\r\nexport default Spinner","import { SyncTargets } from '../classes/Syncer';\r\n\r\nconst METADATA_KEY = 'metadata'\r\nconst SELECTED_PROJECT_ID_KEY = 'selectedProjectId'\r\nconst SETTINGS_KEY = 'settings'\r\nconst TOKENS_KEY = 'tokens'\r\n\r\nexport const hasItem = (key: string): boolean => {\r\n    return !!localStorage.getItem(key)\r\n}\r\n\r\nexport const getObject = (key: string): any => {\r\n    return JSON.parse(localStorage.getItem(key) || '{}')\r\n}\r\n\r\nexport const setObject = (key: string, obj: any): void => {\r\n    localStorage.setItem(key, JSON.stringify(obj))\r\n}\r\n\r\nexport const removeItem = (key: string) => {\r\n    localStorage.removeItem(key)\r\n}\r\n\r\nexport const setSelectedProjectId = (id: string): void => {\r\n    localStorage.setItem(SELECTED_PROJECT_ID_KEY, id)\r\n}\r\n\r\nexport const getSelectedProjectId = (): string => {\r\n    return localStorage.getItem(SELECTED_PROJECT_ID_KEY) || ''\r\n}\r\n\r\nconst getSettings = (): any => { \r\n    return getObject(SETTINGS_KEY)   \r\n}\r\n\r\nexport const getSyncTarget = (): SyncTargets => {\r\n    return getSettings().syncTarget as SyncTargets\r\n}\r\n\r\nexport const setSyncTarget = (syncTarget: SyncTargets): void => {\r\n    setObject(SETTINGS_KEY, { ...getSettings(), syncTarget })\r\n}\r\n\r\nconst getTokens = (): any => {\r\n    return getObject(TOKENS_KEY)\r\n}\r\n\r\nexport const getDropboxToken = (): string => {\r\n    return getTokens().dropboxAccessToken\r\n}\r\n\r\nexport const setDropboxToken = (dropboxAccessToken: string): void => {\r\n    setObject(TOKENS_KEY, { ...getTokens(), dropboxAccessToken })\r\n}\r\n\r\nexport const getMetadada = (): any => {\r\n    return getObject(METADATA_KEY)\r\n}\r\n\r\nexport const setMetadada = (metadata: any) => {\r\n    setObject(METADATA_KEY, metadata)\r\n}\r\n\r\nexport const hasMetadata = (): boolean => {\r\n    return hasItem(METADATA_KEY)\r\n}\r\n","export const isMobile = () => {\r\n    if (navigator.maxTouchPoints) return navigator.maxTouchPoints > 0\r\n    if (navigator.msMaxTouchPoints) return navigator.msMaxTouchPoints > 0\r\n\r\n    const mQ = window.matchMedia && matchMedia(\"(pointer:coarse)\")\r\n    if (mQ && mQ.media === \"(pointer:coarse)\") return !!mQ.matches\r\n\r\n    if ('orientation' in window) return true\r\n\r\n    return (/\\b(BlackBerry|webOS|iPhone|IEMobile)\\b/i.test(navigator.userAgent) ||\r\n            /\\b(Android|Windows Phone|iPad|iPod)\\b/i.test(navigator.userAgent))\r\n}\r\n\r\nexport const readFile = (blob: Blob): Promise<string> => {\r\n    return new Promise((resolve, reject) => {\r\n        const fr = new FileReader()\r\n        fr.onerror = reject\r\n        fr.onload = () => resolve(fr.result as string)\r\n        fr.readAsText(blob)\r\n    })\r\n}\r\n\r\nexport const generateId = (length: number = 10): string => {\r\n    let id = ''\r\n    while (id.length < length) {\r\n        id += Math.floor(Math.random() * 1E10).toString()\r\n    }\r\n    return id.substring(0, length)\r\n}\r\n","import { SyncStatuses } from '../components/Statuses/SyncStatus';\r\nimport DropboxConnector from './DropboxConnector';\r\nimport { reload, store } from './Store'\r\nimport * as ls from \"../services/localStorageService\"\r\nimport * as taskService from '../services/taskService'\r\nimport metaLocal, { Metadata } from './Metadata'\r\n\r\nconst SYNC_INTERVAL_IN_MINUTES = 10\r\n\r\nexport interface ICloudConnector {\r\n    syncTarget: SyncTargets\r\n    authorize: () => any\r\n    check: () => any\r\n    downloadItems: (names: string[]) => Promise<any[]>\r\n    uploadItems: (files: string[][]) => Promise<void>\r\n    deleteItems: (names: string[]) => Promise<void>\r\n    downloadMetadata: () => Promise<string>\r\n    uploadMetadata: (metadata: string) => void\r\n}\r\n\r\nexport enum SyncTargets {\r\n    Dropbox = 'DROPBOX',\r\n    Disabled = 'DISABLED'\r\n}\r\n\r\nclass Syncer {\r\n    private cloudConnector: ICloudConnector | null = null\r\n    private isSyncFaild: boolean = false\r\n    private interval: any = null\r\n\r\n    async init(cloudConnector?: ICloudConnector) {\r\n        if (cloudConnector) {\r\n            this.cloudConnector = cloudConnector\r\n            ls.setSyncTarget(cloudConnector.syncTarget)\r\n        } else {\r\n            const syncTarget = ls.getSyncTarget()\r\n            if (syncTarget === SyncTargets.Disabled) {\r\n                this.cloudConnector = null\r\n            } else {\r\n                this.cloudConnector = this.createCloudConnector(syncTarget)\r\n            }\r\n        }\r\n        \r\n        clearInterval(this.interval)\r\n\r\n        const isConfigured = this.cloudConnector ? await this.check() : false        \r\n\r\n        if (isConfigured) {\r\n            await this.sync()\r\n            this.interval = setInterval(this.sync.bind(this), 60000 * SYNC_INTERVAL_IN_MINUTES)\r\n        }\r\n    }\r\n\r\n    async sync() {\r\n        if (store.syncStatus === SyncStatuses.InProgress) return\r\n\r\n        this.isSyncFaild = false\r\n        store.syncStatus = SyncStatuses.InProgress\r\n\r\n        try {\r\n            const metaRemote = await this.fetchRemoteMeta()\r\n            await this.syncChanges(metaLocal, metaRemote)\r\n        } catch (e) {\r\n            console.error(e);\r\n            this.isSyncFaild = true\r\n        }\r\n\r\n        store.syncStatus = this.isSyncFaild\r\n            ? SyncStatuses.Failure\r\n            : SyncStatuses.Idle\r\n    }\r\n\r\n    private async check(): Promise<boolean> {\r\n        try {\r\n            await this.cloudConnector!.check()\r\n        } catch(e) {\r\n            if (e.message.toLowerCase().includes('not_configured')) {\r\n                store.syncStatus = SyncStatuses.NotConfigured\r\n                return false\r\n            } else {\r\n                store.syncStatus = SyncStatuses.Failure\r\n                return true\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    private createCloudConnector(syncTarget?: SyncTargets) {\r\n        switch (syncTarget) {\r\n            case SyncTargets.Dropbox:\r\n                return new DropboxConnector()\r\n            default:\r\n                return null\r\n        }\r\n    }\r\n\r\n    private async fetchRemoteMeta(): Promise<Metadata> {\r\n        const taskListStr = await this.cloudConnector?.downloadMetadata() || '{}'\r\n        const taskList = JSON.parse(taskListStr)\r\n        return new Metadata(taskList)\r\n    }\r\n\r\n    private uploadRemoteMeta(metadata: Metadata) {\r\n        const taskListStr = JSON.stringify(metadata.taskList)\r\n        this.cloudConnector?.uploadMetadata(taskListStr)\r\n    }\r\n\r\n    private processChanges = (local: Metadata, remote: Metadata) => {\r\n        const localList = local.taskList\r\n        const remoteList = remote.taskList\r\n\r\n        if (!Object.keys(remoteList).length) {\r\n            local.created = Object.keys(localList)\r\n            local.deleted = []\r\n            return\r\n        }\r\n      \r\n        local.created.forEach((it) => { remoteList[it] = localList[it] })\r\n        local.deleted.forEach((it) => { remote.removeFromTaskList(it) })\r\n\r\n        Object.keys(localList).forEach((it) => {\r\n            if (!remoteList.hasOwnProperty(it)) {\r\n                remote.addToDeleted(it)\r\n                return\r\n            }\r\n      \r\n            const remoteUpdatedAt = remoteList[it].u\r\n            const localUpdatedAt =  localList[it].u\r\n            if (remoteUpdatedAt > localUpdatedAt) {\r\n                remote.addToUpdated(it)\r\n            } else if (remoteUpdatedAt < localUpdatedAt) {\r\n                local.addToUpdated(it)\r\n            }\r\n        })\r\n      \r\n        Object.keys(remoteList).forEach((it) => {\r\n            if (!localList.hasOwnProperty(it)) {\r\n                remote.addToCreated(it)\r\n            }\r\n        })\r\n    }\r\n\r\n    private syncChanges = async (local: Metadata, remote: Metadata) => {\r\n        this.processChanges(local, remote)\r\n\r\n        const toDownload = remote.created.concat(remote.updated)\r\n        const toUpload = local.created.concat(local.updated)\r\n        const toDeleteLocal = remote.deleted\r\n        const toDeleteRemote = local.deleted\r\n    \r\n        const isRemoteModified = toUpload.length || toDeleteRemote.length\r\n        const isLocalModified = toDownload.length || toDeleteLocal.length\r\n\r\n        const items = await this.cloudConnector?.downloadItems(toDownload)\r\n        items?.forEach((it) => taskService.createTask(it))\r\n \r\n        const filesToUpload = toUpload.map((it) => {\r\n            const fileContent = localStorage.getItem(it) || ''\r\n            return [fileContent, it]\r\n        })\r\n        await this.cloudConnector?.uploadItems(filesToUpload)\r\n\r\n        await this.cloudConnector?.deleteItems(toDeleteRemote)\r\n\r\n        toDeleteLocal.forEach((it) => taskService.deleteTask(it))\r\n    \r\n        local.reset()\r\n        local.save()\r\n\r\n        isLocalModified && reload()\r\n        \r\n        if (isLocalModified || isRemoteModified) this.uploadRemoteMeta(metaLocal)\r\n      }\r\n}\r\n\r\nconst syncer = new Syncer()\r\n\r\nexport default syncer\r\n","import * as ls from '../services/localStorageService'\r\n\r\nexport const ROOT_ID = '0'\r\n\r\nexport type Item = {\r\n    id: string\r\n    parentId: string | null\r\n    updatedAt: number\r\n}\r\n\r\nexport type TaskList = { [id: string]: { p: string | null, u: number } }\r\n\r\nexport class Metadata {\r\n    taskList: TaskList\r\n    created: string[] = []\r\n    deleted: string[] = []\r\n    updated: string[] = []\r\n\r\n    constructor(taskList: TaskList = {}) {\r\n        this.taskList = taskList\r\n    }\r\n\r\n    addToTaskList(item: Item): void {\r\n        const { id, parentId, updatedAt } = item\r\n        this.taskList[id] = {\r\n            p: parentId,\r\n            u: updatedAt\r\n        }\r\n    }\r\n\r\n    removeFromTaskList(id: string): void {\r\n        delete this.taskList[id]\r\n    }\r\n\r\n    addToCreated(id: string): void {\r\n        this.created.push(id)\r\n    }\r\n\r\n    removeFromCreated(id: string): void {\r\n        if (this.created.includes(id)) {\r\n            this.created = this.created.filter((it) => it !== id)\r\n        }\r\n    }\r\n\r\n    addToDeleted(id: string): void {\r\n        this.deleted.push(id)\r\n    }\r\n\r\n    addToUpdated(id: string): void {\r\n        this.updated.push(id)\r\n    }\r\n\r\n    registerCreated(item: Item): void {\r\n        if (this.isRoot(item.id)) return\r\n        this.addToTaskList(item)\r\n        this.addToCreated(item.id)\r\n        this.save()\r\n    }\r\n\r\n    registerUpdated(item: Item): void {\r\n        this.addToTaskList(item)\r\n        this.save()\r\n    }\r\n\r\n    registerDeleted(id: string): void {\r\n        this.removeFromTaskList(id)\r\n        this.created.includes(id)\r\n            ? this.removeFromCreated(id)\r\n            : this.addToDeleted(id)\r\n        this.save()\r\n    }\r\n\r\n    getChildrenIds(parentId: string): string[] {\r\n        return this.getAllTaskIds().reduce((acc: string[], curr) => {\r\n            if (this.taskList[curr].p === parentId) acc.push(curr)\r\n            return acc\r\n        }, [])\r\n    }\r\n\r\n    hasChildren(parentId: string): boolean {\r\n        return Object.values(this.taskList).some((it) => it.p === parentId)\r\n    }\r\n\r\n    isProject(taskId: string): boolean {\r\n        const taskMetaRecord = this.taskList[taskId]\r\n        return taskMetaRecord && taskMetaRecord.p === ROOT_ID\r\n    }\r\n\r\n    isRoot(taskId: string): boolean {\r\n        return taskId === ROOT_ID\r\n    }\r\n\r\n    getAllTaskIds(): string[] {\r\n        return Object.keys(this.taskList)\r\n    }\r\n\r\n    save(): void {\r\n        const metadata = {\r\n            taskList: this.taskList,\r\n            created: this.created,\r\n            deleted: this.deleted\r\n        }\r\n        ls.setMetadada(metadata)\r\n    }\r\n\r\n    restore(): void {\r\n        const metadata = ls.getMetadada()\r\n        this.taskList = metadata.taskList\r\n        this.created = metadata.created\r\n        this.deleted = metadata.deleted\r\n    }\r\n\r\n    reset(): void {\r\n        this.created = []\r\n        this.deleted = []\r\n        this.updated = []\r\n        this.save()\r\n    }\r\n\r\n    init(): void {\r\n        ls.hasMetadata()\r\n            ? this.restore() \r\n            : this.save()\r\n    }\r\n}\r\n\r\nconst metadata = new Metadata()\r\n\r\nexport default metadata\r\n","import Task from \"../classes/Task\"\r\nimport * as ls from \"./localStorageService\"\r\nimport metadata, { ROOT_ID } from '../classes/Metadata'\r\nimport { store } from '../classes/Store' \r\n\r\nexport const initRoot = () => {\r\n    if (hasRoot()) return\r\n    const root = { \r\n        id: '0', \r\n        text: \"Projects\" \r\n    }\r\n    createTask(new Task(root))\r\n}\r\n\r\nexport const hasRoot = (): boolean => {\r\n    return ls.hasItem(ROOT_ID)\r\n}\r\n\r\nexport const getRoot = () => {\r\n    return getTask(ROOT_ID)\r\n}\r\n\r\nexport const getTask = (taskId: string): Task => {\r\n    return ls.getObject(taskId)\r\n}\r\n\r\nexport const getTaskList = (taskIds: string[]): Task[] => {\r\n    return taskIds.reduce((acc: Task[], curr) => {\r\n        acc.push(getTask(curr))\r\n        return acc\r\n    }, [])\r\n}\r\n\r\nexport const getAllTasks = (): Task[] => {\r\n    return getTaskList(metadata.getAllTaskIds())\r\n}\r\n\r\nexport const getSubTasksList = (parentId: string): Task[] => {\r\n    const childrenIds = metadata.getChildrenIds(parentId)\r\n    return getTaskList(childrenIds)\r\n}\r\n\r\nexport const getProjectsList = (): Task[] => {\r\n    const childrenIds = metadata.getChildrenIds(ROOT_ID)\r\n    return getTaskList(childrenIds)\r\n}\r\n\r\nexport const getTasksTree = () => {\r\n    const addSubTasks = (parent: Task) => {\r\n        parent.subTasks = getSubTasksList(parent.id)\r\n        parent.subTasks.forEach((task) => addSubTasks(task))\r\n    }\r\n    const root = getRoot()\r\n    addSubTasks(root)\r\n    return root\r\n}\r\n\r\nexport const updateTask = (task: Task): void => {\r\n    task.updatedAt = Date.now()\r\n    ls.setObject(task.id, task)\r\n    metadata.registerUpdated(task)\r\n}\r\n\r\nexport const createTask = (task: Task): void => {\r\n    if (!task.updatedAt) task.updatedAt = Date.now()\r\n    ls.setObject(task.id, task)\r\n    metadata.registerCreated(task)\r\n}\r\n\r\nexport const createTasks = (tasks: Task[]): void => {\r\n    tasks.forEach((task) => createTask(task))\r\n}\r\n\r\nexport const deleteTask = (taskId: string): void => {\r\n    if (metadata.isProject(taskId) && store.selectedProjectId === taskId) {\r\n        store.selectedProjectId = ''\r\n        ls.setSelectedProjectId('')\r\n    }\r\n    ls.removeItem(taskId)\r\n    metadata.registerDeleted(taskId)\r\n    metadata.getChildrenIds(taskId).forEach((id) => deleteTask(id))\r\n}\r\n\r\nexport const deleteTasks = (taskIds: string[]): void => {\r\n    taskIds.forEach((id) => deleteTask(id))\r\n}\r\n","import { setDropboxToken, getDropboxToken } from '../services/localStorageService';\r\nimport { Dropbox } from 'dropbox'\r\nimport fetch from 'isomorphic-fetch'\r\nimport { generateId } from '../utils/commonUtils'\r\n\r\nconst AUTH_URL = 'https://www.dropbox.com/oauth2/authorize'\r\nconst TOKEN_URL = 'https://api.dropbox.com/oauth2/token'\r\n\r\nexport default class DropboxClient {\r\n    private clientId: string\r\n    private codeVerifier: string\r\n    private dropbox: Dropbox | null | undefined\r\n\r\n    constructor(clientId: string) {\r\n        this.clientId = clientId\r\n        this.codeVerifier = generateId(43)\r\n        this.initDropbox()\r\n    }\r\n\r\n    async check() {\r\n        this.validateConfiguration()\r\n        await this.dropbox!.checkUser({ query: 'maybedo' })\r\n    }\r\n\r\n    async authorize(authorizationCode: string = '') {\r\n        const body = new URLSearchParams({\r\n            code: authorizationCode,\r\n            grant_type: 'authorization_code',\r\n            client_id: this.clientId,\r\n            code_verifier: this.codeVerifier\r\n        })\r\n    \r\n        const response = await fetch(TOKEN_URL, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body\r\n        })\r\n    \r\n        const resData = await response.json()\r\n\r\n        if (!response.ok) {\r\n            throw new Error(resData.error_description)\r\n        }\r\n    \r\n        const accessToken = resData.access_token\r\n\r\n        setDropboxToken(accessToken)\r\n\r\n        this.initDropbox(accessToken)\r\n    }\r\n\r\n    async listFolder(path?: string) {\r\n        path = path || ''\r\n        this.validateConfiguration()\r\n        return await this.dropbox!.filesListFolder({ path })\r\n    }\r\n\r\n    async downloadFile(path: string) {\r\n        this.validateConfiguration()\r\n        return await this.dropbox!.filesDownload({ path })\r\n    } \r\n    \r\n    async uploadFile(contents: Object, path: string) {\r\n        this.validateConfiguration()\r\n        return await this.dropbox!.filesUpload({ contents, path, mode: {'.tag': 'overwrite'} })\r\n    }\r\n\r\n    async deleteFile(path: string) {\r\n        this.validateConfiguration()\r\n        return await this.dropbox!.filesDeleteV2({ path })\r\n    }\r\n\r\n    get authUrl(): string {\r\n        return `${AUTH_URL}?client_id=${this.clientId}&response_type=code&code_challenge_method=plain&code_challenge=${this.codeVerifier}`\r\n    }\r\n\r\n    get isConfigured(): boolean {\r\n        return !!this.dropbox\r\n    }\r\n\r\n    private initDropbox(token?: string) {\r\n        const accessToken = token || getDropboxToken()\r\n        this.dropbox = accessToken \r\n            ? new Dropbox({ accessToken, fetch })\r\n            : null\r\n    }\r\n\r\n    validateConfiguration() {\r\n        if (!this.dropbox) throw new Error('not_configured')\r\n    }\r\n}\r\n","import { readFile } from '../utils/commonUtils';\r\nimport { ICloudConnector, SyncTargets } from './Syncer';\r\nimport DropboxClient from './DropboxClient'\r\n\r\nconst CLIENT_ID = 'lxn28fv9hhsn7id'\r\n\r\nconst DATA_FOLDER_PATH = '/data'\r\nconst METADATA_FILE_PATH = '/metadata.json'\r\n\r\nexport default class DropboxConnector implements ICloudConnector {\r\n    private dropboxClient: DropboxClient\r\n\r\n    syncTarget = SyncTargets.Dropbox\r\n\r\n    constructor() {\r\n        this.dropboxClient = new DropboxClient(CLIENT_ID)\r\n    }\r\n\r\n    get authUrl(): string {\r\n        return this.dropboxClient.authUrl\r\n    }\r\n\r\n    get isConfigured(): boolean {\r\n        return this.dropboxClient.isConfigured\r\n    }\r\n\r\n    async authorize(authorizationCode?: string)  {\r\n        await this.dropboxClient.authorize(authorizationCode)\r\n    }\r\n\r\n    async check() {\r\n        await this.dropboxClient.check()\r\n    }\r\n\r\n    async downloadItems(names: string[]): Promise<any[]> {\r\n        const files = []\r\n        for (const name of names) {\r\n            const path = `${DATA_FOLDER_PATH}/${name}.json`\r\n            try {\r\n                const response: any = await this.dropboxClient.downloadFile(path)\r\n                const fileContent = await readFile(response.result.fileBlob)\r\n                files.push(JSON.parse(fileContent as string))\r\n            } catch (e) {\r\n                if (!this.isFileNotFound(e)) throw e\r\n            }  \r\n        }\r\n        return files\r\n    }\r\n\r\n    async uploadItems(files: string[][]): Promise<void> {\r\n        for (const file of files) {\r\n            const path = `${DATA_FOLDER_PATH}/${file[1]}.json`\r\n            await this.dropboxClient.uploadFile(file[0], path)\r\n        }\r\n    }\r\n\r\n    async deleteItems(names: string[]): Promise<void> {\r\n        for (const name of names) {\r\n            const path = `${DATA_FOLDER_PATH}/${name}.json`    \r\n            try {\r\n                await this.dropboxClient.deleteFile(path)\r\n            } catch (e) { \r\n                if (!this.isFileNotFound(e)) throw e\r\n            }                   \r\n        }\r\n    }\r\n\r\n    async downloadMetadata(): Promise<string> {        \r\n        try {\r\n            const response: any = await this.dropboxClient.downloadFile(METADATA_FILE_PATH)\r\n            return await readFile(response.result.fileBlob)\r\n        } catch(e) {\r\n            return ''\r\n        }\r\n    }\r\n\r\n    async uploadMetadata(metadata: string) {\r\n        await this.dropboxClient.uploadFile(metadata, METADATA_FILE_PATH)\r\n    }\r\n\r\n    isFileNotFound(e: any): boolean {\r\n        return !!e && JSON.parse(e.error)\r\n            .error_summary\r\n            .includes('not_found')\r\n    }\r\n}\r\n","import syncer from '../../classes/Syncer'\r\nimport './SyncStatus.scss'\r\nimport { \r\n    MdSyncProblem,\r\n    MdSyncDisabled,\r\n    MdSync\r\n} from 'react-icons/md'\r\nimport { usePropertyWithState } from '../../classes/Store'\r\n\r\nexport enum SyncStatuses {\r\n    NotConfigured = 'NOT_CONFIGURED',\r\n    Idle = 'IDLE',\r\n    InProgress = 'IN_PROGRESS',\r\n    Failure = 'FAILURE'\r\n}\r\n\r\nconst SyncStatus = () => {\r\n    const [ status ] = usePropertyWithState('syncStatus')\r\n\r\n    const refresh = () => syncer.sync()\r\n\r\n    const baseClass = 'material-icons-outlined common-btn'\r\n    const noHoverClass = baseClass + ' no-hover'\r\n    const inProgresClass = noHoverClass + ' syncing'\r\n    const failureClass = baseClass + ' failure'\r\n\r\n    const getStatusElement = (status?: SyncStatuses) => {\r\n        switch (status) {\r\n            case SyncStatuses.NotConfigured:\r\n                return <MdSyncDisabled \r\n                            className={noHoverClass}\r\n                            title=\"cloud sync disabled\"\r\n                        />  \r\n            case SyncStatuses.Idle:\r\n                return <MdSync \r\n                            className={baseClass}\r\n                            onClick={refresh}\r\n                            title=\"synchronize\"\r\n                        />     \r\n            case SyncStatuses.InProgress:\r\n                return <MdSync \r\n                            className={inProgresClass}\r\n                            onClick={refresh}\r\n                            title=\"synchronizing\"\r\n                        />                \r\n            case SyncStatuses.Failure:\r\n                return <MdSyncProblem \r\n                            className={failureClass}\r\n                            onClick={refresh}\r\n                            title=\"sync failed\"\r\n                        />            \r\n            default:\r\n                 return <MdSyncDisabled \r\n                            className={noHoverClass}\r\n                            title=\"cloud sync disabled\"\r\n                        />   \r\n        }\r\n    } \r\n\r\n    return (\r\n        <div className='sync-status'>\r\n            {getStatusElement(status)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SyncStatus\r\n","import { createStore } from './StoreFactory';\r\nimport * as ls from \"../services/localStorageService\"\r\nimport { getProjectsList, initRoot } from '../services/taskService'\r\nimport metadata from './Metadata'\r\nimport { SyncStatuses } from '../components/Statuses/SyncStatus'\r\nimport { IBanner } from '../components/Banner/Banner'\r\n\r\nmetadata.init()\r\ninitRoot()\r\n\r\ntype Store = {\r\n    selectedProjectId: string,\r\n    showLoading: boolean,\r\n    banner: IBanner | null,\r\n    syncStatus: SyncStatuses\r\n}\r\n\r\nexport const initSelectProjectId = () => (\r\n    ls.getSelectedProjectId()\r\n        || getProjectsList()[0]?.id \r\n        || ''\r\n)\r\n\r\nconst initialValue: Store = {\r\n    selectedProjectId: initSelectProjectId(),\r\n    showLoading: false,\r\n    banner: null,\r\n    syncStatus: SyncStatuses.NotConfigured\r\n}\r\n\r\nexport const {\r\n    store,\r\n    notify,\r\n    useEvent,\r\n    usePropertyWithState,\r\n    useReload,\r\n    reload\r\n} = createStore(initialValue)\r\n\r\nexport enum Events {\r\n    SetTitleByProject,\r\n    SetProjectByTitle,\r\n    DeleteCompleted,\r\n} \r\n","import { useEffect, useState } from 'react'\r\n\r\nexport const createStore = <T extends object>(initialValue: T) => {\r\n    type Callback = (value?: any) => void\r\n    type Property = keyof typeof initialValue\r\n    type StoreData = typeof initialValue\r\n\r\n    const subsciptions: Map<string, Callback[]> = new Map()\r\n    \r\n    const subscribe = (eventOrProperty: string, callback: Callback) => {\r\n        const callbacks = subsciptions.get(eventOrProperty)\r\n        callbacks\r\n            ? callbacks.push(callback)\r\n            : subsciptions.set(eventOrProperty, [callback])\r\n    }\r\n\r\n    const unsubscribe = (eventOrProperty: string, callback: Callback) => {\r\n        const callbacks = subsciptions.get(eventOrProperty)\r\n        if (callbacks) {\r\n            const newCallbacks = callbacks.filter((it) => it !== callback)\r\n            subsciptions.set(eventOrProperty as string, newCallbacks)\r\n        }\r\n    }\r\n\r\n    const notify = (eventOrProperty: string, value?: any) => {\r\n        subsciptions.get(eventOrProperty)?.forEach((callback) => callback(value))\r\n    }\r\n\r\n    const toProxy = (obj: StoreData):  StoreData => {\r\n        const proxyHandler = {\r\n            set: (target: any, property: string, value: any) => {\r\n                target[property] = value\r\n                notify(property, value)\r\n                return true\r\n            },\r\n            get: (target: any, property: string) => {\r\n                return target[property]\r\n            }\r\n        }\r\n        return new Proxy(obj, proxyHandler)\r\n    }\r\n\r\n    const store: StoreData = toProxy(initialValue)\r\n\r\n    const useSubscribe = (eventOrProperty: string, callback: Callback) => {  \r\n        useEffect(() => {\r\n            subscribe(eventOrProperty, callback)\r\n            return () => unsubscribe(eventOrProperty, callback)\r\n        }, [callback, eventOrProperty])\r\n    }\r\n\r\n    const useEvent = (eventName: string, callback: Callback): Callback => {  \r\n        useSubscribe(eventName, callback)\r\n        return (value: any) => notify(eventName, value)\r\n    }\r\n\r\n    const useProperty = (property: Property, callback: Callback) => { \r\n        useSubscribe(property as string, callback)\r\n    \r\n        return (value: any) => store[property] = value\r\n    }\r\n    \r\n    const usePropertyWithState = (property: Property, callback?: Callback): [any, Callback] => {  \r\n        const [ state, setState ] = useState(store[property])\r\n    \r\n        const onNotify = (value: any) => {\r\n            callback && callback(value)\r\n            setState(value)\r\n        }\r\n        useProperty(property, onNotify)\r\n    \r\n        return [ state, (value: any) => store[property] = value ]\r\n    }\r\n\r\n    const useReload = (callback: Callback) => {\r\n        const [ , setState ] = useState({})\r\n\r\n        const onNotify = () => {\r\n            callback && callback()\r\n            setState({})\r\n        }\r\n        \r\n        useEvent('reload', onNotify)\r\n    }\r\n\r\n    const reload = () => notify('reload')\r\n\r\n    return {\r\n        store,\r\n        notify,\r\n        useSubscribe,\r\n        useEvent,\r\n        useProperty,\r\n        usePropertyWithState,\r\n        useReload,\r\n        reload\r\n    }\r\n}\r\n","import Fog from '../Fog/Fog'\r\nimport Spinner from './Spinner'\r\nimport './Loading.scss'\r\nimport { usePropertyWithState } from '../../classes/Store'\r\n\r\ntype Props = {\r\n    spinnerClass?: string\r\n}\r\n\r\nconst Loading = (props: Props) => {\r\n    const { spinnerClass } = props\r\n\r\n    const [ showLoading ] = usePropertyWithState('showLoading')\r\n\r\n    if (!showLoading) return null\r\n    \r\n    return (\r\n        <>\r\n            <Fog isDisplayed={true} />\r\n            <div className=\"loading\">\r\n                <Spinner customClass={spinnerClass} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Loading\r\n","import { useEffect } from 'react'\r\nimport './Banner.scss'\r\nimport { MdClose } from 'react-icons/md'\r\nimport { usePropertyWithState } from '../../classes/Store'\r\n\r\nconst Banner = () => {\r\n    const [ banner, setBanner ] = usePropertyWithState('banner')\r\n\r\n    useEffect(() => {\r\n        if (banner && banner.delay && banner.delay > 0) {\r\n            setTimeout(() => setBanner(null), banner.delay * 1000)\r\n        }\r\n    }, [banner, setBanner])\r\n\r\n    if (!banner) return null\r\n\r\n    const { text, type } = banner\r\n\r\n    return (\r\n        <div className={`banner banner-${type}`}>\r\n            <div>{text}</div>\r\n            <MdClose onClick={() => setBanner(null)} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n\r\nexport interface IBanner {\r\n    text: string\r\n    type: BannerTypes\r\n    delay?: number\r\n}\r\n\r\nexport enum BannerTypes {\r\n    Success = \"success\",\r\n    Warning = \"warning\",\r\n    Failure = \"failure\"\r\n}\r\n\r\nexport class FailureBanner implements IBanner {\r\n    text: string\r\n    type: BannerTypes\r\n\r\n    constructor(text: string) {\r\n        this.text = text\r\n        this.type = BannerTypes.Failure\r\n    }\r\n}\r\n\r\nexport class SuccessBanner implements IBanner {\r\n    text: string\r\n    type: BannerTypes\r\n    delay: number\r\n\r\n    constructor(text: string, delay: number = 5) {\r\n        this.text = text\r\n        this.type = BannerTypes.Success\r\n        this.delay = delay\r\n    }\r\n}\r\n","import { \r\n    MutableRefObject, \r\n    useEffect \r\n} from \"react\"\r\n\r\nexport const useOutsideClickDetector = (\r\n    ref: MutableRefObject<HTMLElement | null>, \r\n    action: Function, \r\n    isEnabled: boolean = true) => \r\n{\r\n    useEffect(() => {\r\n        if (!isEnabled) return\r\n\r\n        const handleClickOutside = (e: any) => {\r\n            if (ref.current && !ref.current.contains(e.target)) {\r\n                action()\r\n            }\r\n        }\r\n\r\n        document.addEventListener(\"mousedown\", handleClickOutside)\r\n\r\n        return () => document.removeEventListener(\"mousedown\", handleClickOutside)\r\n    }, [action, isEnabled, ref])\r\n}\r\n","import { memo } from 'react'\r\nimport './Record.scss'\r\nimport Task from '../../classes/Task'\r\nimport { MdAdd } from 'react-icons/md'\r\n\r\ntype Props = { add: (task: Task) => void }\r\n \r\nconst AddRecord = ({ add }: Props) => {    \r\n    const createRecord = (e: any) => {\r\n        const text = e.target.textContent.trim()\r\n        if (!text) return\r\n        const task = new Task({ text })\r\n        add(task)\r\n        e.target.textContent = ''\r\n    }\r\n\r\n    return (  \r\n        <div className=\"record add-record\">\r\n            <div className=\"row-btns\">\r\n                <MdAdd />\r\n            </div>\r\n            <div \r\n                className=\"item-content\" \r\n                contentEditable=\"true\"\r\n                suppressContentEditableWarning={true}\r\n                onInput={createRecord}\r\n                onKeyPress={preventEnterOnEmpty}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst preventEnterOnEmpty = (e: any) => {\r\n    !e.target.textContent.trim() && e.key === 'Enter' && e.preventDefault()\r\n}\r\n\r\nexport default memo(AddRecord)\r\n","import './Button.scss'\r\nimport { MdCheckBoxOutlineBlank, MdCheckBox } from 'react-icons/md'\r\n\r\ntype Props = {\r\n    actionOnClick: (e: any) => void\r\n    isChecked?: boolean,\r\n    priority: number\r\n}\r\n\r\nconst CheckmarkButton = (props: Props) => {\r\n    const {\r\n        actionOnClick,\r\n        isChecked = false,\r\n        priority\r\n    } = props\r\n\r\n    const classes = [ \r\n        'common-btn', \r\n        'checkmark-btn', \r\n        isChecked ? 'prio-0' : 'prio-' + priority \r\n    ].join(' ')\r\n\r\n    return (\r\n        <>\r\n            {isChecked\r\n                ? <MdCheckBox \r\n                    className={classes} \r\n                    onClick={actionOnClick}\r\n                />\r\n                : <MdCheckBoxOutlineBlank \r\n                    className={classes} \r\n                    onClick={actionOnClick}\r\n                />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CheckmarkButton\r\n","import { useState, useRef } from \"react\"\r\nimport { RiDeleteBin7Fill, RiDeleteBinFill } from 'react-icons/ri'\r\nimport { MdCheck, MdClose } from \"react-icons/md\"\r\nimport { useOutsideClickDetector } from '../../utils/customHooks'\r\nimport Task from \"../../classes/Task\"\r\nimport { notify, Events } from \"../../classes/Store\"\r\n\r\ntype Props = {\r\n    task: Task,\r\n    isBulk?: boolean,\r\n    isDisabled?: boolean,\r\n    closeMenu?: () => void\r\n    remove: (task: Task) => void\r\n}\r\n\r\nconst DeleteRecords = (props: Props) => {\r\n    const { \r\n        task, \r\n        isBulk = false, \r\n        isDisabled = false,\r\n        closeMenu = () => {},\r\n        remove\r\n     } = props\r\n\r\n    const [ showDeleteConfirmation, setShowDeleteConfirmation ] = useState(false)\r\n\r\n    const deleteRecord = (e: any) => {\r\n        e.stopPropagation()\r\n        setShowDeleteConfirmation(false)\r\n        remove(task)\r\n    }\r\n\r\n    const deleteCompleted = (e: any) => {\r\n        e.stopPropagation()\r\n        setShowDeleteConfirmation(false)\r\n        notify(Events.DeleteCompleted + task.id)\r\n        closeMenu()\r\n    }\r\n\r\n    const openDeleteConfirmation = (e: any) => {\r\n        e && e.stopPropagation()\r\n        setShowDeleteConfirmation(true)\r\n    }\r\n\r\n    const closeDeleteConfirmation = (e: any) => {\r\n        e && e.stopPropagation()\r\n        setShowDeleteConfirmation(false)\r\n    }\r\n\r\n    const confirmRef = useRef(null)\r\n    useOutsideClickDetector(confirmRef, closeDeleteConfirmation, showDeleteConfirmation)\r\n\r\n    const configSingle = {\r\n        icon: <RiDeleteBin7Fill />,\r\n        text: 'Delete',\r\n        tooltip: 'Delete task',\r\n        deleteAction: deleteRecord\r\n    }\r\n    \r\n    const configBulk = {\r\n        icon: <RiDeleteBinFill />,\r\n        text: 'Clear',\r\n        tooltip: 'Delete completed subtasks',\r\n        deleteAction: deleteCompleted\r\n    }\r\n\r\n    const { \r\n        icon, \r\n        text, \r\n        tooltip, \r\n        deleteAction \r\n    } = isBulk ? configBulk : configSingle\r\n\r\n    const classNames = [ 'record-menu-row' ]\r\n    isDisabled && classNames.push('disabled')\r\n\r\n    return (\r\n        <>\r\n            {showDeleteConfirmation \r\n                ?\r\n                <div className=\"record-menu-row\" ref={confirmRef}>\r\n                    <div className=\"inline-menu-btn\">\r\n                        <MdCheck onClick={deleteAction} />\r\n                    </div>\r\n                    <div className=\"inline-menu-btn\">\r\n                        <MdClose onClick={closeDeleteConfirmation} />\r\n                    </div>\r\n                </div>\r\n                :\r\n                <div \r\n                    onClick={openDeleteConfirmation} \r\n                    title={tooltip} \r\n                    className={classNames.join(' ')}\r\n                >\r\n                    {icon}\r\n                    <div className=\"menu-item-text\">{text}</div>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DeleteRecords\r\n","import { useState, useRef } from 'react'\r\nimport Task, { Priorities } from '../../classes/Task'\r\nimport { RiFilePptFill } from 'react-icons/ri'\r\nimport { useOutsideClickDetector } from '../../utils/customHooks'\r\n\r\nconst PRIORITY_NAMES = new Map([\r\n    [Priorities.Trivial, 'Trivial'],\r\n    [Priorities.Minor, 'Minor'],\r\n    [Priorities.Normal, 'Normal'],\r\n    [Priorities.Major, 'Major'],\r\n    [Priorities.Critical, 'Critical'],\r\n    [undefined, 'Trivial'],\r\n])\r\n\r\ntype Props = { \r\n    task: Task,\r\n    closeMenu: () => void,\r\n    update: (task: Task) => void\r\n}\r\n\r\nconst Priority = (props: Props) => {\r\n    const {\r\n        task,\r\n        closeMenu,\r\n        update\r\n    } = props\r\n\r\n    const [ showSelector, setShowSelector ] = useState(false)\r\n\r\n    const openSelector = (e: any) => {\r\n        e.stopPropagation()\r\n        setShowSelector(true)\r\n    }\r\n    const closeSelector = () => setShowSelector(false)\r\n\r\n    const switchRef = useRef(null)\r\n    useOutsideClickDetector(switchRef, closeSelector, showSelector)\r\n\r\n    const handleClickOnSwitch = (e: any) => {\r\n        e.stopPropagation()\r\n        const el = e.target as HTMLDivElement   \r\n        const priority = parseInt(el.textContent!)     \r\n        if (priority !== task.priority) {\r\n            update({ ...task, priority })\r\n        }\r\n        closeMenu() \r\n    }\r\n\r\n    return (\r\n        <>\r\n            {showSelector \r\n                ? <div \r\n                    className=\"record-menu-row priority-switch\" \r\n                    onClick={handleClickOnSwitch}\r\n                    ref={switchRef} \r\n                >\r\n                    <div className=\"inline-menu-btn\"><div>{Priorities.Trivial}</div></div>\r\n                    <div className=\"inline-menu-btn\"><div>{Priorities.Minor}</div></div>\r\n                    <div className=\"inline-menu-btn\"><div>{Priorities.Normal}</div></div>\r\n                    <div className=\"inline-menu-btn\"><div>{Priorities.Major}</div></div>\r\n                    <div className=\"inline-menu-btn\"><div>{Priorities.Critical}</div></div>\r\n                </div> \r\n                : <div \r\n                    className=\"record-menu-row\" \r\n                    onClick={openSelector} \r\n                    title=\"Set task priotity\"\r\n                >\r\n                    <RiFilePptFill className=\"menu-item-icon\" />\r\n                    <div className=\"menu-item-text\">\r\n                        {PRIORITY_NAMES.get(task.priority)}\r\n                    </div>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Priority\r\n","import { RiFileAddFill } from 'react-icons/ri'\r\n\r\ntype Props = {\r\n    closeMenu: () => void\r\n    showSubtasks: () => void\r\n    isDisabled?: boolean\r\n}\r\n\r\nconst AddSubtask = ({ closeMenu, showSubtasks, isDisabled = false }: Props) => {\r\n    const handleClickOnAddSubtask = () => {\r\n        closeMenu()\r\n        showSubtasks()\r\n    }\r\n\r\n    const classes = [\r\n        'record-menu-row',\r\n        isDisabled ? 'disabled' : ''\r\n    ].join(' ')\r\n\r\n    return (\r\n        <div \r\n            className={classes}\r\n            title=\"Add subtask\" \r\n            onClick={handleClickOnAddSubtask}\r\n        >\r\n            <RiFileAddFill className=\"menu-item-icon\" />\r\n            <div className=\"menu-item-text\">Add</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddSubtask\r\n","import { useRef, useState } from 'react'\r\nimport { MdMoreVert } from \"react-icons/md\"\r\nimport Task from '../../classes/Task'\r\nimport { useOutsideClickDetector } from '../../utils/customHooks'\r\nimport DeleteRecords from './DeleteRecords'\r\nimport Priority from './Priority'\r\nimport './RecordMenu.scss'\r\nimport AddSubtask from './AddSubtask'\r\n\r\ntype Props = {\r\n    task: Task,\r\n    classes?: string[],\r\n    showSubtasks?: () => void,\r\n    update?: (task: Task) => void,\r\n    remove?: (task: Task) => void,\r\n    isProject?: boolean,\r\n    isTitle?: boolean\r\n}\r\n\r\nconst RecordMenu = (props: Props) => {\r\n    const {\r\n        task,\r\n        classes = [],\r\n        showSubtasks = () => {},\r\n        update = () => {},\r\n        remove = () => {},\r\n        isProject = false,\r\n        isTitle = false\r\n    } = props\r\n\r\n    const [ showMenu, setShowMenu ] = useState(false)\r\n\r\n    const openMenu = (e: any) => {\r\n        e.stopPropagation() // prevent task selection on click\r\n        setShowMenu(true)\r\n    }\r\n\r\n    const closeMenu = () => setShowMenu(false)\r\n\r\n    const menuRef = useRef(null)\r\n    useOutsideClickDetector(menuRef, closeMenu, showMenu)\r\n\r\n    let closeTimeout: any\r\n    const handleMouseLeave = () => {\r\n        closeTimeout = setTimeout(closeMenu, 500)\r\n    }\r\n    const handleMouseEnter = () => {\r\n        clearTimeout(closeTimeout)\r\n    }\r\n    \r\n    return (\r\n        <div className={'record-menu-box ' + classes.join(' ')}>\r\n            <MdMoreVert className=\"common-btn\" onClick={openMenu} />\r\n            {showMenu && <div \r\n                className=\"record-menu\"\r\n                ref={menuRef} \r\n                onMouseLeave={handleMouseLeave}\r\n                onMouseEnter={handleMouseEnter}\r\n            >\r\n                {!task.isDone && !isTitle && <Priority \r\n                    task={task} \r\n                    closeMenu={closeMenu} \r\n                    update={update}\r\n                />}\r\n                {!isProject && !task.isDone && !isTitle && <AddSubtask \r\n                    closeMenu={closeMenu}\r\n                    showSubtasks={showSubtasks}\r\n                    isDisabled={false}\r\n                />}\r\n                <DeleteRecords\r\n                    task={task} \r\n                    isBulk\r\n                    isDisabled={false}\r\n                    closeMenu={closeMenu}\r\n                    remove={remove}\r\n                />\r\n                {!isTitle && \r\n                    <DeleteRecords \r\n                        task={task}\r\n                        remove={remove}\r\n                    />\r\n                }\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecordMenu\r\n","import { useRef, useEffect } from 'react'\r\n\r\ntype Props = { \r\n    text: string, \r\n    isEditable: boolean,\r\n    onInput: (text: string) => void,\r\n    getFocus?: boolean, \r\n    isSingleLine?: boolean,\r\n    classes?: string[]\r\n}\r\n\r\nconst Editable = (props: Props) => {\r\n    const {\r\n        text,\r\n        isEditable,\r\n        onInput,\r\n        getFocus = false,\r\n        isSingleLine = false,\r\n        classes = []\r\n    } = props\r\n\r\n    const editableRef = useRef<HTMLDivElement>(null)\r\n\r\n    useEffect(() => {\r\n        const curr = editableRef.current\r\n        if (curr && curr.innerHTML !== text) curr.innerHTML = text\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (getFocus) {        \r\n            setContentEditable(true)\r\n            editableRef.current?.focus()\r\n            setCaretPosition(editableRef.current, text.length)\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    const setContentEditable = (flag: boolean) => {\r\n        const el = editableRef.current\r\n        el?.setAttribute('contenteditable', '' + flag)\r\n    }\r\n\r\n    const handleInput = debounceInput(onInput)\r\n\r\n    const handleBlur = (e: any) => {\r\n        !isEditable && setContentEditable(false)\r\n    }\r\n\r\n    const preserveSingleLine = (e: any) => {\r\n        isSingleLine && e.key === 'Enter' && e.preventDefault()\r\n    }\r\n\r\n    const classNames = [ \r\n        ...classes,\r\n        isEditable ? '' : 'read-only'\r\n    ].join(' ')\r\n\r\n    return (\r\n        <div \r\n            ref={editableRef}\r\n            className={classNames}\r\n            contentEditable={isEditable}\r\n            suppressContentEditableWarning={true}\r\n            onInput={handleInput}\r\n            onBlur={handleBlur}\r\n            onKeyPress={preserveSingleLine}\r\n        />\r\n    )\r\n}\r\n\r\nconst debounceInput = (callback: (text: string) => void) => {\r\n    let timeout: any\r\n    return (e: any) => {\r\n        const text = e.target.innerHTML\r\n        clearTimeout(timeout)\r\n        timeout = setTimeout(() => callback(text), 700)\r\n    }\r\n}\r\n\r\nconst setCaretPosition = (el: HTMLElement | null, pos?: number): void => {\r\n    if (!el) return\r\n    const range = document.createRange()\r\n    const selection = window.getSelection()\r\n    const elContentNode = el.childNodes[0]\r\n    if (!elContentNode || !elContentNode.textContent) return\r\n    const textLength = elContentNode.textContent.length\r\n    const positionNormalized = pos !== undefined \r\n        ? Math.min(pos, textLength) \r\n        : textLength\r\n    range.setStart(elContentNode, positionNormalized)\r\n    range.collapse()\r\n    selection?.removeAllRanges()\r\n    selection?.addRange(range)\r\n}\r\n\r\nexport default Editable\r\n","import { useState } from 'react'\r\nimport './Record.scss'\r\nimport Task from '../../classes/Task'\r\nimport CheckmarkButton from '../Buttons/CheckmarkButton'\r\nimport { MdExpandLess, MdExpandMore } from 'react-icons/md'\r\nimport RecordMenu from '../RecordMenu/RecordMenu'\r\nimport Editable from './Editable'\r\nimport RecordList from '../RecordList/RecordList'\r\nimport { store, useEvent, notify, Events } from '../../classes/Store'\r\nimport metadata from '../../classes/Metadata'\r\n\r\ntype Props = { \r\n    item: Task, \r\n    isEditable?: boolean,\r\n    isSelected?: boolean,\r\n    update?: (task: Task) => void,\r\n    remove?: (task: Task) => void,\r\n    isFocused?: boolean\r\n}\r\n\r\nconst Record = (props: Props) => {\r\n    const {\r\n        isEditable = true,\r\n        isSelected = false,\r\n        isFocused = false,\r\n        item,\r\n        update = () => {},\r\n        remove = () => {},\r\n        item: {\r\n            id,\r\n            text,\r\n            isDone,\r\n            priority\r\n        }\r\n    } = props\r\n\r\n    const hasSubtasks = metadata.hasChildren(id)\r\n    const isProject = metadata.isProject(id)\r\n    const isRoot = metadata.isRoot(id)\r\n\r\n    const [ showSubtasks, setShowSubtasks ] = useState(false)\r\n\r\n    const updateTextFromTitle = (text: string) => {\r\n        update({ ...item, text})\r\n    }\r\n\r\n    const updateTextFromEditable = (text: string) => {        \r\n        update({ ...item, text})\r\n        isProject && notify(Events.SetTitleByProject + id, text)\r\n    }\r\n\r\n    useEvent(Events.SetProjectByTitle + id, updateTextFromTitle)\r\n    \r\n    const handleClickOnRecord = () => { \r\n        if (isProject && !isRoot) store.selectedProjectId = id\r\n    }\r\n\r\n    const handleClickOnCheckbox = (e: any) => {\r\n        e.stopPropagation()\r\n        if (e.button === 0) { // left click only            \r\n            update({ ...item, isDone: !item.isDone})\r\n        }\r\n    }\r\n\r\n    const recordClassName = [\r\n        'record', \r\n        isSelected ? 'record-selected' : '',\r\n        !isEditable ? 'read-only' : '',\r\n        isProject? 'project' : '',\r\n        isDone ? 'item-done' : ''\r\n    ].join(' ')\r\n        \r\n    const hiddenBtnClassName = window.iAmRunningOnMobile ? '' : 'hidden-btn' \r\n\r\n    const openSubtasks = () => {\r\n        setShowSubtasks(true)\r\n    }\r\n\r\n    const closeSubtasks = () => {\r\n        setShowSubtasks(false)\r\n    }\r\n\r\n    const getSubtasksBtn = () => {\r\n        const classes = \"common-btn subtasks-btn\"\r\n        if (hasSubtasks && !showSubtasks) {\r\n            return <MdExpandMore onClick={openSubtasks} className={classes} />\r\n        }\r\n        if (showSubtasks) {\r\n            return <MdExpandLess onClick={closeSubtasks} className={classes} />\r\n        }\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div \r\n                className={recordClassName}\r\n                onClick={handleClickOnRecord}\r\n            >\r\n                <div className=\"row-btns\">\r\n                    <CheckmarkButton \r\n                        actionOnClick={handleClickOnCheckbox} \r\n                        isChecked={isDone}\r\n                        priority={priority}\r\n                    />\r\n                </div>\r\n                <Editable \r\n                    text={text} \r\n                    onInput={updateTextFromEditable} \r\n                    isEditable={isEditable}\r\n                    getFocus={isFocused}\r\n                    classes={[ 'item-content' ]}\r\n                />\r\n                <div className=\"row-btns\">\r\n                    {getSubtasksBtn()}\r\n                    <RecordMenu \r\n                        task={item} \r\n                        showSubtasks={openSubtasks}\r\n                        classes={[ hiddenBtnClassName ]}\r\n                        isProject={isProject}\r\n                        isTitle={isRoot}\r\n                        update={update}\r\n                        remove={remove}\r\n                    /> \r\n                </div>\r\n            </div>\r\n            {showSubtasks && \r\n                <RecordList \r\n                    classNames={['subtasks-list']}\r\n                    rootId={id}\r\n                />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Record\r\n","import { useEffect, useState } from \"react\"\r\nimport { useEvent, notify, Events } from \"../../classes/Store\"\r\nimport Task from \"../../classes/Task\"\r\nimport Editable from \"../Record/Editable\"\r\nimport RecordMenu from \"../RecordMenu/RecordMenu\"\r\n\r\ntype Props =  {\r\n    item: Task\r\n    isEditable?: boolean,\r\n    remove?: (task: Task) => void\r\n}\r\n\r\nconst Title = (props: Props) => {\r\n    const { \r\n        isEditable = true,\r\n        item,\r\n        item: { text, id },\r\n        remove = () => {}\r\n    } = props\r\n\r\n    const [ title, setTitle ] = useState('')\r\n\r\n    useEffect(() => {\r\n        setTitle(text)\r\n    }, [text])\r\n\r\n    useEvent(Events.SetTitleByProject + id, setTitle)\r\n\r\n    const updateTitle = (title: string) => {\r\n        notify(Events.SetProjectByTitle + id, title)\r\n    }\r\n\r\n    return (\r\n        <div className=\"title\">\r\n            <Editable \r\n                text={title} \r\n                onInput={updateTitle} \r\n                isEditable={isEditable}\r\n                isSingleLine\r\n            />\r\n            <RecordMenu\r\n                task={item}\r\n                isTitle\r\n                remove={remove}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Title\r\n","import { \r\n    useEffect, \r\n    useRef, \r\n    useState \r\n} from 'react'\r\nimport AddRecord from '../Record/AddRecord'\r\nimport Task, { Priorities } from '../../classes/Task'\r\nimport Record from '../Record/Record'\r\nimport './RecordList.scss'\r\nimport { \r\n    createTask, \r\n    deleteTask, \r\n    deleteTasks, \r\n    getSubTasksList, \r\n    getTask, \r\n    updateTask \r\n} from '../../services/taskService'\r\nimport { store, useEvent, useReload, Events } from '../../classes/Store'\r\nimport metadata from '../../classes/Metadata'\r\nimport Title from './Title'\r\n\r\ntype Props = { \r\n    classNames?: string[],\r\n    rootId: string,\r\n    hasTitle?: boolean,\r\n    isEditable?: boolean,\r\n    projectId?: string\r\n}\r\n\r\nconst RecordList = (props: Props) => {\r\n    const {\r\n        classNames = [],\r\n        rootId,\r\n        hasTitle = false,\r\n        isEditable = true,\r\n        projectId\r\n    } = props\r\n\r\n    const [root, setRoot] = useState<Task>(new Task())\r\n    const [subTasks, setSubTasks] = useState<Task[]>([])\r\n\r\n    const setData = () => {\r\n        const task = getTask(rootId)\r\n        setRoot(task)\r\n        const subTasks = getSubTasksList(rootId)\r\n        setSubTasks(subTasks)\r\n    }\r\n\r\n    const focusedItemId = useRef<string>() \r\n\r\n    useReload(setData)\r\n\r\n    useEffect(setData, [rootId])\r\n\r\n    useEffect(() => { focusedItemId.current = '' }, [rootId])\r\n\r\n    const isRootList = metadata.isRoot(rootId)\r\n\r\n    const addSubTask = (task: Task) => {\r\n        task.parentId = root.id\r\n\r\n        createTask(task)\r\n        \r\n        focusedItemId.current = task.id\r\n\r\n        const newSubTasks = subTasks.concat(task)\r\n        setSubTasks(newSubTasks)\r\n\r\n        if (isRootList) store.selectedProjectId = task.id\r\n    }\r\n\r\n    const updateSubTask = (task: Task) => {\r\n        const newSubTasks = subTasks.map((it) => {\r\n            return it.id === task.id ? task : it  \r\n        })\r\n        setSubTasks(newSubTasks)\r\n        updateTask(task)\r\n    }\r\n\r\n    const deleteSubTask = (task: Task) => {\r\n        const isSelectedPojectDeleted = store.selectedProjectId === task.id\r\n        const newSubTasks = subTasks.filter((it) => it !== task)\r\n        setSubTasks(newSubTasks)\r\n        deleteTask(task.id)\r\n        if (isSelectedPojectDeleted) store.selectedProjectId = ''\r\n    }\r\n\r\n    const deleteCompletedSubTask = () => {\r\n        const idsToDelete = subTasks.filter((it) => it.isDone).map((it) => it.id)\r\n        const isSelectedPojectDeleted = idsToDelete\r\n            .some((id) => store.selectedProjectId === id)\r\n        const newSubTasks = subTasks.filter((it) => !it.isDone)\r\n        setSubTasks(newSubTasks)\r\n        deleteTasks(idsToDelete)\r\n        if (isSelectedPojectDeleted) store.selectedProjectId = ''\r\n    }\r\n\r\n    useEvent(Events.DeleteCompleted + rootId, deleteCompletedSubTask)\r\n\r\n    // sort subtask by priority\r\n    const setAndComparePriotity = (a: Task, b: Task) => {\r\n        const pa = a.priority || Priorities.Trivial\r\n        const pb = b.priority || Priorities.Trivial\r\n\r\n        if (pa > pb) return -1\r\n        if (pa < pb) return 1\r\n        return 0\r\n    }\r\n    subTasks.sort(setAndComparePriotity)\r\n\r\n    const activeTasks = subTasks.filter((t) => !t.isDone)\r\n    const completedTasks = subTasks.filter((t) => t.isDone)\r\n\r\n    const activeItemListRef = useRef<HTMLDivElement>(null)\r\n\r\n    const classes = [\r\n        isRootList ? 'project-list' : 'task-list',\r\n        ...classNames\r\n    ].join(' ')\r\n\r\n    return (\r\n        <div className={classes}>\r\n            {hasTitle && \r\n                <Title\r\n                    item={root}\r\n                    isEditable={isEditable}\r\n                    remove={deleteSubTask}\r\n                />\r\n            }\r\n            <div className=\"active-tasks\" ref={activeItemListRef}>\r\n                {activeTasks.map(\r\n                    (task: Task) => \r\n                        <Record \r\n                            key={task.id} \r\n                            item={task}\r\n                            isEditable={isEditable}\r\n                            isSelected={projectId === task.id}\r\n                            update={updateSubTask}\r\n                            remove={deleteSubTask}\r\n                            isFocused={focusedItemId.current === task.id}\r\n                        />\r\n                )}\r\n            </div>\r\n            <AddRecord add={addSubTask}/>\r\n            {!!completedTasks.length && <div className=\"completed-tasks\">\r\n                {completedTasks.map(\r\n                    (task: Task) => \r\n                        <Record \r\n                            key={task.id}\r\n                            item={task}\r\n                            isEditable={isEditable}\r\n                            isSelected={projectId === task.id}\r\n                            update={updateSubTask}\r\n                            remove={deleteSubTask}\r\n                        />\r\n                )}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecordList\r\n","import { useRef } from 'react'\r\nimport { useOutsideClickDetector } from '../../utils/customHooks'\r\nimport Fog from '../Fog/Fog'\r\nimport { BsBoxArrowLeft } from 'react-icons/bs'\r\nimport RecordList from '../RecordList/RecordList'\r\nimport { ROOT_ID } from '../../classes/Metadata'\r\nimport { APP_VERSION } from '../../version'\r\n\r\ntype Props = {\r\n    isOpened: boolean,\r\n    close: () => void,\r\n    isSettingsOpened: boolean,\r\n    projectId: string\r\n}\r\n\r\nconst Sidebar = (props: Props) => {\r\n    const { \r\n        isOpened, \r\n        close, \r\n        isSettingsOpened, \r\n        projectId \r\n    } = props\r\n\r\n    const leftPanelRef = useRef(null)\r\n    useOutsideClickDetector(leftPanelRef, close, isOpened) \r\n\r\n    const handleClick = (e: any) => {\r\n        const el = e.target as HTMLDivElement  \r\n              \r\n        if (el.getAttribute('contenteditable') === \"false\") close()\r\n    }\r\n\r\n    const classes = [\r\n        'left-panel',\r\n        isOpened ? 'panel-opened' : '',\r\n        isSettingsOpened? 'no-scroll' : ''\r\n    ].join(' ')\r\n\r\n    return (\r\n        <div \r\n            ref={leftPanelRef} \r\n            className={classes} \r\n            onClick={handleClick}\r\n        >\r\n            <div className=\"app-version\">v{APP_VERSION}</div>\r\n            <Fog isDisplayed={isSettingsOpened} />\r\n                <div className=\"top-panel\">\r\n                    <div className=\"row-btns\">\r\n                        <BsBoxArrowLeft \r\n                            onClick={close}\r\n                            className=\"common-btn close-menu-btn\"\r\n                            title=\"hide projects list\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            <RecordList \r\n                rootId={ROOT_ID}\r\n                hasTitle\r\n                isEditable={false}\r\n                projectId={projectId}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","export const APP_VERSION = '0.2.4'","import { useRef, useState } from 'react'\r\nimport Task from '../../classes/Task'\r\nimport { FailureBanner, SuccessBanner } from '../Banner/Banner'\r\nimport { readFile } from '../../utils/commonUtils'\r\nimport { reload, store } from '../../classes/Store'\r\nimport Portal from '../../HOCs/Portal'\r\nimport ImportModal from './ImportModal'\r\nimport Button from '../Buttons/Button'\r\nimport { \r\n    createTasks, \r\n    getAllTasks, \r\n    getTasksTree \r\n} from '../../services/taskService'\r\n\r\nenum DataTypes {\r\n    JSON = 'json',\r\n    HTML = 'html'\r\n}\r\n\r\ntype Props = {\r\n    backToTaskList(): void\r\n}\r\n\r\nconst ExportImport = (props: Props) => {\r\n    const [ showModal, setShowModal ] = useState(false)\r\n\r\n    const { backToTaskList } = props\r\n\r\n    const fileInputRef = useRef<HTMLInputElement>(null)\r\n\r\n    let dataType = DataTypes.JSON\r\n\r\n    const exportData = () => {\r\n        switch (dataType) {\r\n            case DataTypes.JSON:\r\n                exportDataAsJson()\r\n                break\r\n            case DataTypes.HTML:\r\n                exportDataAsHtml()\r\n                break\r\n            default:\r\n                exportDataAsJson()\r\n        }\r\n    }\r\n\r\n    const doImport = async () => {\r\n        let tasks: Task[] | null = null\r\n        try {\r\n            const files = fileInputRef.current?.files\r\n            if (files) {\r\n                const fileContent = await readFile(files[0])\r\n                tasks = JSON.parse(fileContent)\r\n                clearFileInput()\r\n                setShowModal(false)\r\n            }\r\n        } catch(err) {\r\n            setShowModal(false)\r\n            store.banner = new FailureBanner('Failed to parse JSON file')\r\n            clearFileInput()\r\n            return\r\n        }\r\n        if (!tasks) {\r\n            store.banner = new FailureBanner('No exported tasks found')\r\n            return\r\n        }\r\n        \r\n        createTasks(tasks)\r\n        backToTaskList()\r\n        reload()\r\n        \r\n        store.banner = new SuccessBanner('Data successfully imported', 5)\r\n    }\r\n\r\n    const clickOnFileInput = () => {\r\n        const node = fileInputRef.current!\r\n        node.click()\r\n    }\r\n\r\n    const clearFileInput = () => {\r\n        const node = fileInputRef.current!\r\n        node.value = ''\r\n    }\r\n\r\n    const setDataType = (e: any) => {\r\n        dataType = e.target.value\r\n    }\r\n\r\n    const onModalConfirm = () => {\r\n        doImport()\r\n    }\r\n\r\n    const onModalCancel = () => {\r\n        clearFileInput()\r\n        setShowModal(false)\r\n    }\r\n\r\n    return (\r\n        <div className=\"settings-block\">\r\n            <h2>Import/Export your data</h2>\r\n            <Button text='export' action={exportData} />\r\n            <span className=\"words-between\">as</span>\r\n            <select className=\"data-types-select\" onChange={setDataType}>\r\n                <option value={DataTypes.JSON}>{DataTypes.JSON.toUpperCase()}</option>\r\n                <option value={DataTypes.HTML}>{DataTypes.HTML.toUpperCase()}</option>\r\n            </select>\r\n            <Button \r\n                text='import json' \r\n                action={clickOnFileInput} \r\n                classNames={['import-btn']} \r\n            />\r\n            <input \r\n                className=\"input-hidden\" \r\n                type=\"file\" \r\n                accept=\".json\" \r\n                onChange={() => setShowModal(true)} \r\n                ref={fileInputRef} \r\n            />\r\n            {showModal && \r\n            <Portal>\r\n                <ImportModal onCancel={onModalCancel} onConfirm={onModalConfirm} />\r\n            </Portal>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst doExport = (data: string, type: DataTypes) => {\r\n    const dataToExport = `data:text/${type};charset=utf-8,${data}`\r\n    const encodedUri = encodeURI(dataToExport)\r\n    const link = document.createElement('a')\r\n    link.setAttribute('href', encodedUri)\r\n    link.setAttribute('download', getExportFileName(type));\r\n    link.click();\r\n}\r\n\r\nconst exportDataAsJson = () => {\r\n    doExport(convertDataToJsonString(), DataTypes.JSON)\r\n}\r\n\r\nconst exportDataAsHtml = () => {\r\n    const taskTree = getTasksTree()\r\n    const content = convertDataToHtmlString(taskTree)\r\n    const styles = 'body { font-family: sans-serif; font-size: 16px; } ul, li { margin-top: 6px }'\r\n    const data = `<html><head><style>${styles}</style></head><body>${content}</body></html>`\r\n    doExport(data, DataTypes.HTML)\r\n}\r\n\r\nconst convertDataToJsonString = (): string => {\r\n    return JSON.stringify(getAllTasks(), null, 2)\r\n}\r\n\r\nconst getExportFileName = (type: DataTypes) => {\r\n    const timestamp = new Date().toISOString()\r\n    return `todolist_export_${timestamp}.${type}`\r\n}\r\n\r\nconst convertDataToHtmlString = (task: Task): string => {\r\n    const textDecoration = task.isDone \r\n        ? 'style=\"text-decoration: line-through\"' \r\n        : ''\r\n\r\n    const subTasksHtml = \r\n        `<ul>${task.subTasks?.map((it) => convertDataToHtmlString(it))}</ul>`\r\n\r\n    return  `<li ${textDecoration}>${task.text + subTasksHtml}</li>`\r\n            .replace(/>,</g, '><')\r\n}\r\n\r\nexport default ExportImport\r\n","import { memo } from 'react'\r\nimport './Button.scss'\r\nimport { MdMenu } from 'react-icons/md'\r\n\r\ntype Props = {\r\n    action: () => void\r\n    classNames?: string[]\r\n    title?: string\r\n}\r\n\r\nconst MenuButton = (props: Props) => {\r\n    const {\r\n        action,\r\n        classNames = [],\r\n        title = ''\r\n    } = props\r\n\r\n    const handleClick = (e: any) => {\r\n        e.stopPropagation()\r\n        action()\r\n    }\r\n\r\n    return (\r\n        <MdMenu \r\n            className={`common-btn ${classNames.join(' ')}`} \r\n            onClick={handleClick}\r\n            title={title}\r\n        />\r\n    )\r\n}\r\n\r\nexport default memo(MenuButton)\r\n","import { useEffect } from \"react\"\r\nimport { createPortal } from \"react-dom\"\r\n\r\ntype Props = { children: any }\r\n\r\nconst Portal = ({ children }: Props) => {\r\n  const mountPoint = document.getElementById(\"portal-root\")\r\n  const el = document.createElement(\"div\")\r\n\r\n  useEffect(() => {\r\n    mountPoint!.appendChild(el)\r\n\r\n    return () => {\r\n        mountPoint!.removeChild(el)\r\n    }\r\n  }, [el, mountPoint])\r\n\r\n  return createPortal(children, el)\r\n};\r\n\r\nexport default Portal","import './withModal.scss'\r\nimport Fog from '../components/Fog/Fog'\r\n\r\nconst withModal = <P extends object>(WrapedComponent: React.ComponentType<P>) => {\r\n\r\n    return (props: any) => (\r\n        <>\r\n            <Fog isDisplayed={true} />\r\n            <div className=\"modal-container\">\r\n                <div className=\"modal-dialog\">\r\n                    <WrapedComponent {...props} />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withModal\r\n","import { forwardRef } from 'react'\r\nimport './Button.scss'\r\n\r\ntype Props = {\r\n    text: string\r\n    action: (e: any) => void\r\n    isOutlined?: boolean\r\n    classNames?: string[]\r\n}\r\n\r\nconst Button = (props: Props, ref?: React.ForwardedRef<HTMLButtonElement>) => {\r\n    const {\r\n        text,\r\n        action,\r\n        isOutlined = false,\r\n        classNames = []\r\n    } = props\r\n\r\n    const classes = [ \r\n        'button',\r\n        isOutlined ? 'outlined-btn' : 'filled-btn',\r\n        ...classNames\r\n    ].join(' ')\r\n    \r\n    return (\r\n        <button \r\n            className={classes}\r\n            onClick={action}\r\n            ref={ref}\r\n        >\r\n            {text}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default forwardRef(Button)\r\n","import withModal from \"../../HOCs/withModal\"\r\nimport { useEffect, useRef } from \"react\"\r\nimport Button from \"../Buttons/Button\"\r\n\r\ntype Props = {\r\n    onConfirm: () => void\r\n    onCancel: () => void\r\n}\r\n\r\nconst ImportModal = (props: Props) => {\r\n    const {\r\n        onConfirm,\r\n        onCancel\r\n    } = props\r\n\r\n    const cancelRef = useRef<HTMLButtonElement>(null)\r\n\r\n    useEffect(() => { setTimeout(() => cancelRef.current?.focus(), 0) })\r\n\r\n    return (\r\n        <>\r\n            <div>Do you want to overwrite existing data?</div>\r\n            <div className=\"modal-btns\">\r\n                <Button \r\n                    text='cancel' \r\n                    ref={cancelRef} \r\n                    action={onCancel} \r\n                    isOutlined\r\n                    classNames={['central-btn']}\r\n                />\r\n                <Button \r\n                    text='ok' \r\n                    action={onConfirm} \r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withModal(ImportModal)\r\n","import { useRef } from 'react'\r\nimport DropboxConnector from '../../classes/DropboxConnector'\r\nimport { FailureBanner, SuccessBanner } from '../Banner/Banner'\r\nimport syncer from '../../classes/Syncer'\r\nimport { GoArrowRight } from \"react-icons/go\";\r\nimport Button from '../Buttons/Button'\r\nimport { store } from '../../classes/Store'\r\n\r\nconst DropboxSettings = () => {\r\n    const dbx = new DropboxConnector()\r\n\r\n    const authTokenRef = useRef<HTMLInputElement>(null)\r\n\r\n    const authorizeApp = async () => {\r\n        store.showLoading = true\r\n        try {\r\n            await dbx.authorize(authTokenRef.current?.value)\r\n\r\n            syncer.init(dbx)\r\n            store.banner = new SuccessBanner('Application successfully authorized')\r\n        } catch(e) {\r\n            store.banner = new FailureBanner('Error: ' + e.message)\r\n        }\r\n        store.showLoading = false\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3>\r\n                Connect Dropbox\r\n                {dbx.isConfigured\r\n                    ? <span className=\"is-authorized already-authorized\" title=\"Already configured\">\r\n                        &#10004;\r\n                    </span>\r\n                    : <span className=\"is-authorized not-authorized\" title=\"Not configured\">\r\n                        !\r\n                    </span>\r\n                }\r\n            </h3>\r\n            <div className=\"dropbox-flow\">\r\n                <Button text='get code' action={()=> window.open(dbx.authUrl, \"_blank\")} />\r\n                <GoArrowRight className=\"arrow-right\" />\r\n                <input \r\n                    type=\"text\" \r\n                    size={48} \r\n                    placeholder=\"insert authorizarion code here\"\r\n                    ref={authTokenRef}\r\n                    className=\"auth-code\"\r\n                />\r\n                <GoArrowRight className=\"arrow-right\" />\r\n                <Button text='authorize' action={authorizeApp} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DropboxSettings\r\n","import { useState } from 'react'\r\nimport * as ls from '../../services/localStorageService'\r\nimport syncer, { SyncTargets } from '../../classes/Syncer'\r\nimport { SyncStatuses } from '../Statuses/SyncStatus'\r\nimport DropboxSettings from './DropboxSettings'\r\nimport { usePropertyWithState } from '../../classes/Store'\r\n\r\nfunction SyncSettings() {\r\n    const [ syncTarget, setSyncTarget ] = useState(ls.getSyncTarget())\r\n\r\n    const [ syncStatus, setSynStatus ] = usePropertyWithState('syncStatus')\r\n\r\n    const isSelectDisabled = syncStatus === SyncStatuses.InProgress\r\n\r\n    const getTargetSettingsElement = () => {\r\n        switch (syncTarget) {\r\n            case SyncTargets.Dropbox:\r\n                return <DropboxSettings />\r\n            default:\r\n                return null\r\n        }\r\n    }\r\n\r\n    const handleTargetChange = (e: any) => {\r\n        const target = e.target.value as SyncTargets\r\n\r\n        if (target === SyncTargets.Disabled) {\r\n            setSynStatus(SyncStatuses.NotConfigured)\r\n        }\r\n            \r\n        setSyncTarget(target)\r\n        ls.setSyncTarget(target)\r\n        syncer.init()\r\n    }  \r\n\r\n    return (\r\n        <div className=\"settings-block\">\r\n            <h2>Cloud Synchronization</h2>\r\n            <select \r\n                disabled={isSelectDisabled} \r\n                value={syncTarget} \r\n                onChange={handleTargetChange}\r\n            >\r\n                <option value={SyncTargets.Disabled}>Disabled</option>\r\n                <option value={SyncTargets.Dropbox}>Dropbox</option>\r\n            </select>\r\n            {getTargetSettingsElement()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SyncSettings\r\n","import './Settings.scss'\r\nimport ExportImport from './ExportImport' \r\nimport SyncSettings from './SyncSettings'\r\n\r\ntype Props = {\r\n    backToTaskList(): void\r\n}\r\n\r\nconst Settings = (props: Props) => {\r\n\r\n    const { backToTaskList } = props\r\n\r\n    return (\r\n        <div className=\"settings\">\r\n            <ExportImport backToTaskList={backToTaskList} />\r\n            <div className=\"divider\" />\r\n            <SyncSettings />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings\r\n","import Banner from '../Banner/Banner'\r\nimport MenuButton from '../Buttons/MenuButton'\r\nimport { RiSettingsLine } from 'react-icons/ri'\r\nimport Fog from '../Fog/Fog'\r\nimport Settings from '../Settings/Settings'\r\nimport SyncStatus from '../Statuses/SyncStatus'\r\nimport { BsBoxArrowLeft } from 'react-icons/bs'\r\nimport RecordList from '../RecordList/RecordList'\r\n\r\ntype Props = {\r\n    isSidebarOpened: boolean,\r\n    isSettingsOpened: boolean,\r\n    openSidebar: () => void,\r\n    toggleSettings: () => void,\r\n    projectId: string\r\n}\r\n\r\nconst Content = (props: Props) => {\r\n    const { \r\n        isSettingsOpened, \r\n        isSidebarOpened, \r\n        openSidebar,\r\n        toggleSettings,\r\n        projectId\r\n    } = props\r\n\r\n    return (\r\n        <div className=\"right-panel\">\r\n            <Fog isDisplayed={isSidebarOpened} />\r\n            <Banner />\r\n            <div className=\"top-panel\">\r\n                {!isSettingsOpened &&\r\n                    <div className=\"row-btns\">\r\n                        <MenuButton \r\n                            action={openSidebar} \r\n                            classNames={['open-menu-btn']}\r\n                            title=\"open projects list\"\r\n                        />\r\n                    </div>\r\n                }\r\n                <div className=\"row-btns\">\r\n                    <SyncStatus />\r\n                    {isSettingsOpened \r\n                        ? <BsBoxArrowLeft \r\n                            className=\"common-btn close settings\"\r\n                            onClick={toggleSettings}\r\n                            title=\"close settings\"\r\n                          />\r\n                        : <RiSettingsLine \r\n                            className=\"common-btn \"\r\n                            onClick={toggleSettings}\r\n                            title=\"settings\"\r\n                          />\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"right-content\">\r\n                {isSettingsOpened \r\n                    ? <Settings backToTaskList={toggleSettings} />\r\n                    : projectId && <RecordList rootId={projectId} hasTitle />\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Content\r\n","import { useEffect, useState } from 'react'\r\nimport './MainContainer.scss'\r\nimport Loading from '../Statuses/Loading'\r\nimport syncer from '../../classes/Syncer'\r\nimport Sidebar from '../Sidebar/Sidebar'\r\nimport Content from './Content'\r\nimport { \r\n    usePropertyWithState, \r\n    useReload, \r\n    initSelectProjectId \r\n} from '../../classes/Store'\r\nimport * as ls from \"../../services/localStorageService\"\r\n\r\nconst MainContainer = () => {\r\n    const [ isSettingsOpened, setIsSettingsOpened ] = useState(false)\r\n    const [ isSidebarOpened, setIsSidebarOpened ] = useState(false)\r\n\r\n    const [ selectedProjectId, setSelectedProjectId ] \r\n        = usePropertyWithState('selectedProjectId')\r\n\r\n    useReload(() => setSelectedProjectId(initSelectProjectId()))    \r\n\r\n    useEffect(() => { syncer.init() }, [])\r\n\r\n    // useEffect(() => ls.setSelectedProjectId(selectedProjectId))\r\n\r\n    ls.setSelectedProjectId(selectedProjectId)\r\n\r\n    const toggleSettings = () => setIsSettingsOpened(!isSettingsOpened)\r\n\r\n    const openSidebar = () => {\r\n        setIsSidebarOpened(true)        \r\n        !window.iAmRunningOnMobile && window.addEventListener('resize', closeSidebar)\r\n    }\r\n\r\n    const closeSidebar = () => {\r\n        setIsSidebarOpened(false)\r\n        window.removeEventListener('resize', closeSidebar)\r\n    }\r\n\r\n    return (\r\n        <div className={`main-container${isSidebarOpened ? ' sidebar-opened' : ''}`}>   \r\n            <Loading />\r\n            <Sidebar \r\n                isOpened={isSidebarOpened} \r\n                close={closeSidebar} \r\n                isSettingsOpened={isSettingsOpened}\r\n                projectId={selectedProjectId}\r\n            />\r\n            <Content \r\n                isSettingsOpened={isSettingsOpened}\r\n                isSidebarOpened={isSidebarOpened}\r\n                toggleSettings={toggleSettings}\r\n                openSidebar={openSidebar}\r\n                projectId={selectedProjectId}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainContainer\r\n","import MainContainer from './components/MainContainer/MainContainer';\r\nimport { isMobile } from './utils/commonUtils';\r\n\r\ndeclare global { interface Window { iAmRunningOnMobile: boolean } }\r\nwindow.iAmRunningOnMobile = isMobile()\r\n\r\nconst App = () => (\r\n    <>\r\n        <div id=\"portal-root\"></div>\r\n        <MainContainer />\r\n    </>\r\n)\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}