{"version":3,"sources":["classes/Task.ts","components/Fog/Fog.tsx","components/Statuses/Spinner.tsx","utils/commonUtils.ts","classes/Store.ts","utils/customHooks.ts","components/Statuses/SyncStatus.tsx","components/Statuses/Loading.tsx","classes/Syncer.ts","classes/DropboxClient.ts","classes/DropboxConnector.ts","utils/localStorageUtils.ts","components/Banner/Banner.tsx","components/Record/AddRecord.tsx","components/RecordList/SubTaskList.tsx","components/Buttons/CheckmarkButton.tsx","components/RecordMenu/DeleteRecords.tsx","components/RecordMenu/Priority.tsx","components/RecordMenu/AddSubtask.tsx","components/RecordMenu/RecordMenu.tsx","components/Record/Editable.tsx","components/Record/Record.tsx","components/RecordList/RecordList.tsx","components/RecordList/ProjectList.tsx","components/Sidebar/Sidebar.tsx","utils/persistDataUtils.ts","components/Buttons/MenuButton.tsx","components/NoProjects/NoProjects.tsx","components/RecordList/TaskList.tsx","HOCs/Portal.tsx","HOCs/withModal.tsx","components/Buttons/Button.tsx","components/Settings/ImportModal.tsx","components/Settings/ExportImport.tsx","components/Settings/DropboxSettings.tsx","components/Settings/SyncModal.tsx","components/Settings/SyncSettings.tsx","components/Settings/Settings.tsx","components/MainContainer/Content.tsx","components/MainContainer/MainContainer.tsx","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["Priorities","Fog","props","isDisplayed","className","style","display","Spinner","customClass","readFile","blob","Promise","resolve","reject","fr","FileReader","onerror","onload","result","readAsText","generateId","length","idLength","id","Math","floor","random","toString","substring","Events","Task","text","parent","isDone","tasks","priority","isOpened","selectedSubTaskId","isNew","this","Trivial","useOutsideClickDetector","ref","action","isEnabled","useEffect","handleClickOutside","e","current","contains","target","document","addEventListener","removeEventListener","SyncStatuses","Store","callbacks","Map","_taskList","toProxy","updatedAt","taskList","data","JSON","parse","setTaskList","setUpdatedAt","notifyWithDelay","Reload","event","callback","cbks","get","push","set","newCbks","filter","it","value","forEach","cbk","setTimeout","notify","context","prop","proxyHandler","newValue","map","undefined","isProxy","isTrackableProp","notifyFromProxy","Proxy","trackableProps","includes","Date","now","linkTasks","task","parentTask","childTask","excludeKeys","stringify","key","storer","selectTask","selectedTask","useSubscribe","subscribe","unsubscribe","useSubscribeWithForceUpdate","forceUpdate","useState","setValue","useForceUpdate","actions","ShowLoading","HideLoading","banner","ShowBanner","status","SetSyncStatus","Loading","spinnerClass","isDiplayed","setIsDisplayed","SyncTargets","SyncSources","SyncStatus","NotConfigured","setStatus","refresh","syncer","onDemandCloud","baseClass","noHoverClass","title","Idle","onClick","InProgress","Failure","getStatusElement","TOKEN_URL","ACCESS_TOKEN_LOCAL_STORAGE_NAME","DropboxClient","clientId","codeVerifier","dropbox","initDropbox","validateConfiguration","checkUser","query","authorizationCode","body","URLSearchParams","code","grant_type","client_id","code_verifier","fetch","method","headers","response","json","resData","ok","Error","error_description","accessToken","access_token","saveAccessTokenToLS","path","filesListFolder","filesDownload","contents","filesUpload","mode","filesDeleteV2","token","getAccessTokenFromLS","Dropbox","localStorage","setItem","getItem","DATA_FOLDER_PATH","METADATA_FILE_PATH","DropboxConnector","dropboxClient","syncTarget","authorize","check","metadata","uploadMetadata","uploadTaskList","downloadFile","fileBlob","fileContent","Metadata","uploadFile","getLatestExport","latestExport","latestExportJson","console","error","toISOString","deleteOldestExports","listFolder","entries","sort","a","b","clientModifiedA","client_modified","clientModifiedB","getSortedExports","sortedExports","pop","path_lower","i","deleteFile","authUrl","isConfigured","saveToLocalStorage","setLsUpdatedAt","setLsTaskList","getLsUpdatedAt","item","parseInt","getLsTaskList","getSyncTarget","setSyncTarget","BannerTypes","cloudConnector","isSyncFaild","interval","bind","onDemandLocal","source","lsUtils","Disabled","createCloudConnector","resetSync","forceUpdateFromSource","onLoadCloud","setInterval","onLoadLocal","addGlobalEventListeners","clearInterval","removeGlobalEventListeners","window","getCloudUpdatedAt","cloudUpdatedAt","lsUpdatedAt","getCloudTaskList","loadToStore","setCloudData","saveToLS","setSyncResultStatus","Remote","taskStore","taskListJSON","setData","message","toLowerCase","downloadMetadata","cloudMetadata","downloadTaskList","uploadData","AddRecord","root","editableRef","useRef","iAmRunningOnMobile","focus","contentEditable","suppressContentEditableWarning","onInput","taskText","textContent","trim","newTask","concat","createTask","isProject","onKeyPress","preventEnterOnEmpty","preventDefault","memo","SubTaskList","classNames","CheckmarkButton","actionOnClick","isChecked","classes","join","DeleteRecords","isBulk","isDisabled","closeMenu","showDeleteConfirmation","setShowDeleteConfirmation","closeDeleteConfirmation","stopPropagation","confirmRef","configSingle","icon","tooltip","deleteAction","deletedTask","deleteTask","configBulk","deleteCompletedSubtasks","PRIORITY_NAMES","Minor","Normal","Major","Critical","Priority","showSelector","setShowSelector","switchRef","el","newPrio","AddSubtask","showSubtasks","RecordMenu","closeTimeout","showMenu","setShowMenu","menuRef","hasSubtasks","hasCompleted","isRoot","onMouseLeave","onMouseEnter","clearTimeout","debounceInput","timeout","innerText","getCaretPosition","isContentEditable","range","getSelection","getRangeAt","err","rangeClone","cloneRange","selectNodeContents","setEnd","endContainer","endOffset","setCaretPosition","pos","createRange","selection","elContentNode","childNodes","textLength","positionNormalized","min","setStart","collapse","removeAllRanges","addRange","Editable","isEditable","caretPosRef","setContentEditable","activeElement","flag","setAttribute","handleInput","onBlur","Record","isTitle","isSelected","setShowSubtasks","recordClassName","hiddenBtnClassName","openSubtasks","closeSubtasks","button","getSubtasksBtn","RecordList","hasTitle","pa","pb","activeTasks","t","completedTasks","activeItemListRef","ProjectList","rootTask","Sidebar","close","isSettingsOpened","leftPanelRef","getAttribute","Banner","setBanner","hide","delay","type","DataTypes","FailureBanner","SuccessBanner","Success","MenuButton","NoProjects","TaskList","projects","selectedProject","find","convertDataToHtmlString","textDecoration","subtasks","replace","getExportFileName","timestamp","validateTaks","dataToValidate","isTask","Portal","children","mountPoint","getElementById","createElement","appendChild","removeChild","createPortal","withModal","WrapedComponent","Button","isOutlined","forwardRef","onConfirm","onCancel","cancelRef","doExport","dataToExport","encodedUri","encodeURI","link","click","exportDataAsJson","convertDataToJsonString","exportDataAsHtml","content","HTML","ExportImport","showModal","setShowModal","backToTaskList","fileInputRef","dataType","doImport","files","clearFileInput","isExportedData","onChange","toUpperCase","accept","DropboxSettings","dbx","authTokenRef","authorizeApp","initSync","open","size","placeholder","onLocal","onRemote","SyncSettings","initialState","dataSource","syncOpts","setSyncOpts","isSelectDisabled","setIsSelectDisabled","targetRef","initSyncWithTarget","disabled","getTargetSettingsElement","Local","Settings","Content","isSidebarOpened","openSidebar","toggleSettings","hasData","MainContainer","setIsSettingsOpened","setIsSidebarOpened","closeSidebar","navigator","maxTouchPoints","msMaxTouchPoints","mQ","matchMedia","media","matches","test","userAgent","isMobile","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","URL","process","href","origin","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.21f6171f.chunk.js","sourcesContent":["import { generateId } from '../utils/commonUtils';\r\n\r\nexport enum Priorities {\r\n    Trivial,\r\n    Minor,\r\n    Normal,\r\n    Major,\r\n    Critical\r\n}\r\n\r\nexport default class Task {\r\n    text: string\r\n    isDone: boolean\r\n    tasks: Task[]\r\n    priority: Priorities\r\n    isOpened?: boolean\r\n    selectedSubTaskId?: string\r\n    \r\n    isNew: boolean\r\n    parent: Task | null\r\n    id: string\r\n\r\n    constructor(text: string, parent: Task | null, isDone?: boolean, id?: string) {\r\n        this.id = id || generateId()\r\n        this.text = text\r\n        this.isDone = isDone || false\r\n        this.tasks = []\r\n        this.isNew = false\r\n        this.parent = parent\r\n        this.priority = Priorities.Trivial\r\n    }\r\n\r\n    get isProject() {        \r\n        return !!!this.parent?.parent\r\n    }\r\n}\r\n","import './Fog.scss'\r\n\r\ntype Props = {\r\n    isDisplayed: Boolean\r\n}\r\n\r\nconst Fog = (props: Props) => {\r\n    const { isDisplayed = false } = props\r\n\r\n    return <div className=\"fog\" style={{display: isDisplayed ? 'block' : 'none'}}/>\r\n}\r\n\r\nexport default Fog","import './Spinner.scss'\r\n\r\ntype Props = {\r\n    customClass?: string\r\n}\r\n\r\nconst Spinner = (props: Props) =>\r\n    <div className={`spinner ${props.customClass || ''}`} />\r\n\r\nexport default Spinner","export const isMobile = () => {\r\n    if (navigator.maxTouchPoints) return navigator.maxTouchPoints > 0\r\n    if (navigator.msMaxTouchPoints) return navigator.msMaxTouchPoints > 0\r\n\r\n    const mQ = window.matchMedia && matchMedia(\"(pointer:coarse)\")\r\n    if (mQ && mQ.media === \"(pointer:coarse)\") return !!mQ.matches\r\n\r\n    if ('orientation' in window) return true\r\n\r\n    return (/\\b(BlackBerry|webOS|iPhone|IEMobile)\\b/i.test(navigator.userAgent) ||\r\n            /\\b(Android|Windows Phone|iPad|iPod)\\b/i.test(navigator.userAgent))\r\n}\r\n\r\nexport const readFile = (blob: Blob): Promise<string> => {\r\n    return new Promise((resolve, reject) => {\r\n        const fr = new FileReader()\r\n        fr.onerror = reject\r\n        fr.onload = () => resolve(fr.result as string)\r\n        fr.readAsText(blob)\r\n    })\r\n}\r\n\r\nexport const generateId = (length?: number): string => {\r\n    const idLength = length && length >= 20 ? length : 20\r\n\r\n    let id = ''\r\n\r\n    while (id.length < idLength) {\r\n        id += Math.floor(Math.random() * 1E10).toString()\r\n    }\r\n    return id.substring(0, length)\r\n}\r\n","import { SyncStatuses } from '../components/Statuses/SyncStatus';\r\nimport { IBanner } from '../components/Banner/Banner';\r\nimport { useEffect } from \"react\"\r\nimport Task from \"./Task\"\r\nimport { useForceUpdate } from \"../utils/customHooks\"\r\n\r\nexport enum Events {\r\n    ShowLoading,\r\n    HideLoading,\r\n    ShowBanner,\r\n    SetSyncStatus,\r\n    Reload\r\n}\r\n\r\nclass Store {\r\n    private callbacks: Map<string | Events, ((value?: any) => void)[]> = new Map()\r\n    private _taskList: Task = this.toProxy(new Task(\"Projects\", null, false, '0'))\r\n\r\n    public updatedAt: number = 0\r\n\r\n    get taskList() {\r\n        return this._taskList\r\n    }\r\n\r\n    get taskListJSON() {\r\n        const excludeKeys = [\"parent\", \"isNew\"]\r\n        const replacer = (key: string, value: any) =>\r\n            excludeKeys.includes(key) ? undefined : value\r\n\r\n        return JSON.stringify(this._taskList, replacer, 2)\r\n    }\r\n\r\n    setData(taskList: string | Task | null, updatedAt: number) {\r\n        if (!taskList) return\r\n\r\n        const data: Task = typeof taskList === \"string\" \r\n            ? JSON.parse(taskList) \r\n            : taskList\r\n\r\n        this.setTaskList(data)\r\n        this.setUpdatedAt(updatedAt)\r\n        this.notifyWithDelay(Events.Reload)\r\n    }\r\n\r\n    subscribe(event: string | Events, callback: (value?: any) => void) {\r\n        const cbks = this.callbacks.get(event)\r\n        if (cbks) {\r\n            cbks.push(callback)\r\n        } else {\r\n            this.callbacks.set(event, [callback])\r\n        }\r\n    }\r\n\r\n    unsubscribe(event: string |Events, callback: (value?: any) => void) {\r\n        const cbks = this.callbacks.get(event)\r\n        if (cbks) {\r\n            const newCbks = cbks.filter((it) => it !== callback)\r\n            this.callbacks.set(event, newCbks)\r\n        }\r\n    }\r\n\r\n    notify(event: string | Events, value?: any) {\r\n        this.callbacks.get(event)?.forEach((cbk) => cbk(value))\r\n    }\r\n\r\n    notifyWithDelay(event: string | Events, value?: any) {\r\n        setTimeout(() => this.notify(event, value), 0)\r\n    }\r\n\r\n    private notifyFromProxy(context: any) {\r\n        let events: string[] = []\r\n\r\n        const { target, prop } = context\r\n\r\n        if (prop === \"priority\") {\r\n            events = [target.parent.id, target.id]\r\n        } else if (prop === \"isDone\") {\r\n            events = [target.parent.id]\r\n        } else {\r\n            events = [target.id]\r\n        }\r\n\r\n        events.forEach((event) => {\r\n            this.callbacks.get(event)?.forEach((cbk) => cbk())\r\n        })\r\n    }\r\n\r\n    private toProxy(data: Task) {\r\n        const proxyHandler = {\r\n            set: (target: any, prop: string, value: any) => {\r\n                if (prop === \"tasks\") {\r\n                    const newValue = value.map((it: any) => {\r\n                        if (it.isProxy !== undefined) {\r\n                            return it\r\n                        } else {\r\n                            return this.toProxy(it)\r\n                        }\r\n                    })\r\n                    target[prop] = newValue\r\n                } else {\r\n                    target[prop] = value\r\n                }\r\n\r\n                if (this.isTrackableProp(prop)) {\r\n                    this.notifyFromProxy({ target, prop, value })\r\n                    this.setUpdatedAt()\r\n                }\r\n                return true\r\n            },\r\n            get: (target: any, prop: string) => {\r\n                if (prop === \"isProxy\") return true\r\n                return target[prop]\r\n            },\r\n        }\r\n\r\n        data.tasks = data.tasks.map((it) => this.toProxy(it))\r\n        if (data.parent) data.parent = new Proxy(data.parent, proxyHandler)\r\n        return new Proxy(data, proxyHandler)\r\n    }\r\n\r\n    private isTrackableProp(prop: any) {\r\n        return trackableProps.includes(prop)\r\n    }\r\n\r\n    private setUpdatedAt(updatedAt?: number) {\r\n        this.updatedAt = updatedAt || Date.now()\r\n    }\r\n\r\n    private setTaskList(taskList: Task) {\r\n        this.linkTasks(taskList, null)\r\n        this._taskList = this.toProxy(taskList)\r\n    }\r\n\r\n    private linkTasks(task: Task, parentTask: Task | null): void {\r\n        task.parent = parentTask\r\n        if (task.tasks) {\r\n            task.tasks.forEach((childTask: Task) => {\r\n                this.linkTasks(childTask, task)\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nconst trackableProps = [\r\n    \"text\",\r\n    \"isDone\",\r\n    \"tasks\",\r\n    \"priority\",\r\n    \"isOpened\",\r\n    \"selectedSubTaskId\",\r\n]\r\n\r\nconst storer = new Store()\r\n\r\nexport default storer\r\n\r\nexport const createTask = (newTask: Task): void => {\r\n    const { parent } = newTask\r\n    parent!.tasks = parent!.tasks.concat(newTask)\r\n}\r\n\r\nexport const deleteTask = (deletedTask: Task): void => {\r\n    const { parent } = deletedTask\r\n    parent!.tasks = parent!.tasks.filter((it) => it !== deletedTask)\r\n}\r\n\r\nexport const deleteCompletedSubtasks = (task: Task): void => {\r\n    task.tasks = task.tasks.filter((it) => !it.isDone)\r\n}\r\n\r\nexport const selectTask = (selectedTask: Task): void => {\r\n    const { parent } = selectedTask\r\n    parent!.selectedSubTaskId = selectedTask.id\r\n}\r\n\r\nexport const useSubscribe = (event: string | Events, callback: (data: any) => void) => {    \r\n    useEffect(() => {\r\n        storer.subscribe(event, callback)\r\n\r\n        return () => storer.unsubscribe(event, callback)\r\n    }, [callback, event])\r\n}\r\n\r\nexport const useSubscribeWithForceUpdate = (event: string | Events) => {    \r\n    const forceUpdate = useForceUpdate()\r\n\r\n    useEffect(() => {\r\n        storer.subscribe(event, forceUpdate)\r\n\r\n        return () => storer.unsubscribe(event, forceUpdate)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [event])\r\n}\r\n\r\nexport const actions = {\r\n    showLoading: () => storer.notify(Events.ShowLoading),\r\n    hideLoading: () => storer.notify(Events.HideLoading),\r\n    showBanner: (banner: IBanner) => storer.notify(Events.ShowBanner, banner),\r\n    setSyncStatus: (status: SyncStatuses) => storer.notify(Events.SetSyncStatus, status),\r\n    reload: () => storer.notify(Events.Reload)\r\n}","import { \r\n    MutableRefObject, \r\n    useEffect, \r\n    useState \r\n} from \"react\"\r\n\r\nexport const useOutsideClickDetector = (\r\n    ref: MutableRefObject<HTMLElement | null>, \r\n    action: Function, \r\n    isEnabled: boolean = true) => \r\n{\r\n    useEffect(() => {\r\n        if (!isEnabled) return\r\n\r\n        const handleClickOutside = (e: any) => {\r\n            if (ref.current && !ref.current.contains(e.target)) {\r\n                action()\r\n            }\r\n        }\r\n\r\n        document.addEventListener(\"mousedown\", handleClickOutside)\r\n\r\n        return () => document.removeEventListener(\"mousedown\", handleClickOutside)\r\n    }, [action, isEnabled, ref])\r\n}\r\n\r\nexport const useForceUpdate = () => {\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    const [value, setValue] = useState(0)\r\n\r\n    return () => setValue(value => value + 1)\r\n}\r\n","import syncer from '../../classes/Syncer'\r\nimport './SyncStatus.scss'\r\nimport { Events, useSubscribe } from '../../classes/Store'\r\nimport { useState } from 'react'\r\nimport { \r\n    MdSyncProblem,\r\n    MdSyncDisabled,\r\n    MdSync\r\n} from 'react-icons/md'\r\n\r\nexport enum SyncStatuses {\r\n    NotConfigured = 'NOT_CONFIGURED',\r\n    Idle = 'IDLE',\r\n    InProgress = 'IN_PROGRESS',\r\n    Failure = 'FAILURE'\r\n}\r\n\r\nconst SyncStatus = () => {\r\n    const [ status, setStatus ] = useState<SyncStatuses>(SyncStatuses.NotConfigured)\r\n\r\n    useSubscribe(Events.SetSyncStatus, setStatus)\r\n\r\n    const refresh = () => {\r\n        syncer.onDemandCloud()\r\n    }\r\n\r\n    const baseClass = 'material-icons-outlined common-btn'\r\n    const noHoverClass = baseClass + ' no-hover'\r\n    const inProgresClass = noHoverClass + ' syncing'\r\n    const failureClass = baseClass + ' failure'\r\n\r\n    const getStatusElement = (status?: SyncStatuses) => {\r\n        switch (status) {\r\n            case SyncStatuses.NotConfigured:\r\n                return <MdSyncDisabled \r\n                            className={noHoverClass}\r\n                            title=\"cloud sync disabled\"\r\n                        />  \r\n            case SyncStatuses.Idle:\r\n                return <MdSync \r\n                            className={baseClass}\r\n                            onClick={refresh}\r\n                            title=\"synchronize\"\r\n                        />     \r\n            case SyncStatuses.InProgress:\r\n                return <MdSync \r\n                            className={inProgresClass}\r\n                            onClick={refresh}\r\n                            title=\"synchronizing\"\r\n                        />                \r\n            case SyncStatuses.Failure:\r\n                return <MdSyncProblem \r\n                            className={failureClass}\r\n                            onClick={refresh}\r\n                            title=\"sync failed\"\r\n                        />            \r\n            default:\r\n                 return <MdSyncDisabled \r\n                            className={noHoverClass}\r\n                            title=\"cloud sync disabled\"\r\n                        />   \r\n        }\r\n    } \r\n\r\n    return (\r\n        <div className='sync-status'>\r\n            {getStatusElement(status)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SyncStatus\r\n","import Fog from '../Fog/Fog'\r\nimport Spinner from './Spinner'\r\nimport './Loading.scss'\r\nimport { Events, useSubscribe } from '../../classes/Store'\r\nimport { useState } from 'react'\r\n\r\ntype Props = {\r\n    spinnerClass?: string\r\n}\r\n\r\nconst Loading = (props: Props) => {\r\n    const { spinnerClass } = props\r\n\r\n    const [ isDiplayed, setIsDisplayed ] = useState(false)\r\n\r\n    const show = () => setIsDisplayed(true)\r\n    const hide = () => setIsDisplayed(false)\r\n\r\n    useSubscribe(Events.ShowLoading, show)\r\n    useSubscribe(Events.HideLoading, hide)\r\n\r\n    if (!isDiplayed) return null\r\n    \r\n    return (\r\n        <>\r\n            <Fog isDisplayed={true} />\r\n            <div className=\"loading\">\r\n                <Spinner customClass={spinnerClass} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Loading\r\n","import { SyncStatuses } from '../components/Statuses/SyncStatus';\r\nimport DropboxConnector from './DropboxConnector';\r\nimport * as lsUtils from \"../utils/localStorageUtils\"\r\nimport taskStore, { actions } from './Store'\r\n\r\nconst SYNC_INTERVAL_IN_MINUTES = 5 \r\n\r\nexport class Metadata {\r\n    updatedAt: number | undefined\r\n\r\n    constructor(updatedAt?: number) {\r\n        this.updatedAt = updatedAt\r\n    }\r\n}\r\n\r\nexport interface ICloudConnector {\r\n    syncTarget: SyncTargets\r\n    authorize: () => any\r\n    check: () => any\r\n    downloadMetadata: () => Promise<Metadata>\r\n    downloadTaskList: () => Promise<string | null>\r\n    uploadData: (metadata: Metadata, taskList: string) => any\r\n}\r\n\r\nexport enum SyncTargets {\r\n    Dropbox = 'DROPBOX',\r\n    Disabled = 'DISABLED'\r\n}\r\n\r\nexport enum SyncSources {\r\n    Local = 'LOCAL',\r\n    Remote = 'REMOTE' \r\n}\r\n\r\nclass Syncer {\r\n    private cloudConnector: ICloudConnector | null = null\r\n    private isSyncFaild: boolean = false\r\n    private interval: any = null\r\n\r\n    public constructor() {\r\n        this.onDemandCloud = this.onDemandCloud.bind(this)\r\n        this.onDemandLocal = this.onDemandLocal.bind(this)\r\n    }\r\n\r\n    async initSync(source?: SyncSources, cloudConnector?: ICloudConnector) {\r\n        actions.showLoading()\r\n\r\n        if (cloudConnector) {\r\n            this.cloudConnector = cloudConnector\r\n            lsUtils.setSyncTarget(cloudConnector.syncTarget)\r\n        } else {\r\n            const syncTarget = lsUtils.getSyncTarget()\r\n            if (syncTarget === SyncTargets.Disabled) {\r\n                this.cloudConnector = null\r\n            } else {\r\n                this.cloudConnector = this.createCloudConnector(syncTarget)\r\n            }\r\n        }\r\n        \r\n        this.resetSync()\r\n\r\n        const isConfigured = this.cloudConnector ? await this.check() : false        \r\n\r\n        if (isConfigured) {\r\n            if (source) {\r\n                await this.forceUpdateFromSource(source)\r\n            } else {\r\n                await this.onLoadCloud()\r\n            }\r\n            this.interval = setInterval(this.onDemandCloud, 60000 * SYNC_INTERVAL_IN_MINUTES)\r\n        } else {\r\n            this.onLoadLocal()\r\n            this.interval = setInterval(this.onDemandLocal, 60000 * SYNC_INTERVAL_IN_MINUTES)\r\n        }\r\n\r\n        this.addGlobalEventListeners()\r\n\r\n        actions.hideLoading()\r\n    }\r\n\r\n    private resetSync() {\r\n        clearInterval(this.interval)\r\n        this.removeGlobalEventListeners()\r\n    }\r\n\r\n    private addGlobalEventListeners() {\r\n        window.addEventListener('unload', this.onDemandLocal)\r\n        window.addEventListener('blur', this.onDemandLocal)\r\n    }\r\n\r\n    private removeGlobalEventListeners() {\r\n        window.removeEventListener('unload', this.onDemandLocal)\r\n        window.removeEventListener('blur', this.onDemandLocal) \r\n    }\r\n\r\n    private async onLoadCloud() {\r\n        this.isSyncFaild = false\r\n        actions.setSyncStatus(SyncStatuses.InProgress)\r\n\r\n        const cloudUpdatedAt = await this.getCloudUpdatedAt()\r\n        const lsUpdatedAt = lsUtils.getLsUpdatedAt()\r\n        \r\n        if (cloudUpdatedAt > lsUpdatedAt) {\r\n            const taskList = await this.getCloudTaskList()\r\n   \r\n            lsUtils.saveToLocalStorage(cloudUpdatedAt, taskList)\r\n            this.loadToStore(cloudUpdatedAt, taskList)\r\n        } else if (cloudUpdatedAt < lsUpdatedAt) {\r\n            const taskList = lsUtils.getLsTaskList()\r\n\r\n            if (taskList) {\r\n                this.loadToStore(lsUpdatedAt, taskList)\r\n                await this.setCloudData({ updatedAt: lsUpdatedAt }, taskList)\r\n            }\r\n        } else if (cloudUpdatedAt === lsUpdatedAt) {\r\n            const taskList = lsUtils.getLsTaskList()\r\n\r\n            this.loadToStore(lsUpdatedAt, taskList)\r\n        } else {\r\n            this.saveToLS()\r\n        }\r\n\r\n        this.setSyncResultStatus()\r\n    }\r\n\r\n    private async forceUpdateFromSource(source: SyncSources) {\r\n        this.isSyncFaild = false\r\n        actions.setSyncStatus(SyncStatuses.InProgress)\r\n        \r\n        if (source === SyncSources.Remote) {\r\n            const updatedAt = await this.getCloudUpdatedAt()\r\n            const taskList = await this.getCloudTaskList()\r\n            lsUtils.saveToLocalStorage(updatedAt, taskList)\r\n            this.loadToStore(updatedAt, taskList)\r\n        } else {\r\n            this.saveToLS()\r\n            const updatedAt = lsUtils.getLsUpdatedAt()\r\n            const taskList = lsUtils.getLsTaskList()\r\n            await this.setCloudData({ updatedAt }, taskList)\r\n        }\r\n\r\n        this.setSyncResultStatus()\r\n    }\r\n\r\n    private onLoadLocal() {\r\n        const lsUpdatedAt = lsUtils.getLsUpdatedAt()\r\n\r\n        if (lsUpdatedAt) {\r\n            const taskList = lsUtils.getLsTaskList()\r\n            this.loadToStore(lsUpdatedAt, taskList)\r\n        } else {\r\n            this.saveToLS()\r\n        }\r\n    }\r\n\r\n    async onDemandCloud() {\r\n        this.isSyncFaild = false\r\n        actions.setSyncStatus(SyncStatuses.InProgress)\r\n\r\n        this.saveToLS()\r\n        \r\n        const cloudUpdatedAt = await this.getCloudUpdatedAt()\r\n        const lsUpdatedAt = lsUtils.getLsUpdatedAt()     \r\n        \r\n        if (cloudUpdatedAt > lsUpdatedAt) {\r\n            const taskList = await this.getCloudTaskList()\r\n\r\n            lsUtils.saveToLocalStorage(cloudUpdatedAt, taskList)\r\n            this.loadToStore(cloudUpdatedAt, taskList)\r\n        } else if (cloudUpdatedAt < lsUpdatedAt) {\r\n            const taskList = lsUtils.getLsTaskList()\r\n\r\n            if (taskList) {\r\n                await this.setCloudData({ updatedAt: lsUpdatedAt }, taskList)\r\n            }\r\n        }\r\n\r\n        this.setSyncResultStatus()\r\n    }\r\n\r\n    private onDemandLocal() {\r\n        this.saveToLS()\r\n    }\r\n\r\n    private saveToLS() {\r\n        const { updatedAt, taskListJSON } = taskStore  \r\n        lsUtils.saveToLocalStorage(updatedAt, taskListJSON)\r\n    }\r\n\r\n    private loadToStore(updatedAt: number, taskList: string | null) {        \r\n        if (!taskList) return\r\n        taskStore.setData(taskList, updatedAt)\r\n    }\r\n\r\n    private async check(): Promise<boolean> {\r\n        try {\r\n            await this.cloudConnector!.check()\r\n        } catch(e) {\r\n            if (e.message.toLowerCase().includes('not_configured')) {\r\n                actions.setSyncStatus(SyncStatuses.NotConfigured)\r\n                return false\r\n            } else {\r\n                actions.setSyncStatus(SyncStatuses.Failure)\r\n                return true\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    private async getCloudUpdatedAt(): Promise<number> {\r\n        try {\r\n            const cloudMetadata = await this.cloudConnector!.downloadMetadata()\r\n            return cloudMetadata?.updatedAt || 0\r\n        } catch {\r\n            this.isSyncFaild = true\r\n            return 0\r\n        }\r\n    }\r\n\r\n    private async getCloudTaskList(): Promise<string | null> {\r\n        try {\r\n            return await this.cloudConnector!.downloadTaskList()\r\n        } catch {\r\n            this.isSyncFaild = true\r\n            return null\r\n        }\r\n    }\r\n\r\n    private async setCloudData(metadata: Metadata, taskList: string | null) {\r\n        try {\r\n            taskList && await this.cloudConnector!.uploadData(metadata, taskList)\r\n        } catch {\r\n            this.isSyncFaild = true            \r\n        }\r\n    }\r\n\r\n    private createCloudConnector(syncTarget?: SyncTargets) {\r\n        switch (syncTarget) {\r\n            case SyncTargets.Dropbox:\r\n                return new DropboxConnector()\r\n            default:\r\n                return null\r\n        }\r\n    }\r\n\r\n    private setSyncResultStatus() {\r\n        if (this.isSyncFaild) {\r\n            actions.setSyncStatus(SyncStatuses.Failure)\r\n        } else {\r\n            actions.setSyncStatus(SyncStatuses.Idle)\r\n        }\r\n    }\r\n}\r\n\r\nconst syncer = new Syncer()\r\n\r\nexport default syncer\r\n","import { Dropbox } from 'dropbox'\r\nimport fetch from 'isomorphic-fetch'\r\nimport { generateId } from '../utils/commonUtils'\r\n\r\nconst AUTH_URL = 'https://www.dropbox.com/oauth2/authorize'\r\nconst TOKEN_URL = 'https://api.dropbox.com/oauth2/token'\r\nconst ACCESS_TOKEN_LOCAL_STORAGE_NAME = 'dropboxAccessToken'\r\n\r\nexport default class DropboxClient {\r\n    private clientId: string\r\n    private codeVerifier: string\r\n    private dropbox: Dropbox | null | undefined\r\n\r\n    constructor(clientId: string) {\r\n        this.clientId = clientId\r\n        this.codeVerifier = generateId(43)\r\n        this.initDropbox()\r\n    }\r\n\r\n    async check() {\r\n        this.validateConfiguration()\r\n        await this.dropbox!.checkUser({ query: 'todom' })\r\n    }\r\n\r\n    async authorize(authorizationCode: string = '') {\r\n        const body = new URLSearchParams({\r\n            code: authorizationCode,\r\n            grant_type: 'authorization_code',\r\n            client_id: this.clientId,\r\n            code_verifier: this.codeVerifier\r\n        })\r\n    \r\n        const response = await fetch(TOKEN_URL, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          body\r\n        })\r\n    \r\n        const resData = await response.json()\r\n\r\n        if (!response.ok) {\r\n            throw new Error(resData.error_description)\r\n        }\r\n    \r\n        const accessToken = resData.access_token\r\n\r\n        this.saveAccessTokenToLS(accessToken)\r\n\r\n        this.initDropbox(accessToken)\r\n    }\r\n\r\n    async listFolder(path?: string) {\r\n        path = path || ''\r\n        this.validateConfiguration()\r\n        return await this.dropbox!.filesListFolder({ path })\r\n    }\r\n\r\n    async downloadFile(path: string) {\r\n        this.validateConfiguration()\r\n        return await this.dropbox!.filesDownload({ path })\r\n    } \r\n    \r\n    async uploadFile(contents: Object, path: string) {\r\n        this.validateConfiguration()\r\n        return await this.dropbox!.filesUpload({ contents, path, mode: {'.tag': 'overwrite'} })\r\n    }\r\n\r\n    async deleteFile(path: string) {\r\n        this.validateConfiguration()\r\n        return await this.dropbox!.filesDeleteV2({ path })\r\n    }\r\n\r\n    get authUrl(): string {\r\n        return `${AUTH_URL}?client_id=${this.clientId}&response_type=code&code_challenge_method=plain&code_challenge=${this.codeVerifier}`\r\n    }\r\n\r\n    get isConfigured(): boolean {\r\n        return !!this.dropbox\r\n    }\r\n\r\n    private initDropbox(token?: string) {\r\n        const accessToken = token || this.getAccessTokenFromLS()\r\n        this.dropbox = accessToken \r\n            ? new Dropbox({ accessToken, fetch })\r\n            : null\r\n    }\r\n\r\n    private saveAccessTokenToLS(accessToken: string) {\r\n        localStorage.setItem(ACCESS_TOKEN_LOCAL_STORAGE_NAME, accessToken!)\r\n    }\r\n    \r\n    private getAccessTokenFromLS() {\r\n        return localStorage.getItem(ACCESS_TOKEN_LOCAL_STORAGE_NAME)\r\n    }\r\n\r\n    validateConfiguration() {\r\n        if (!this.dropbox) throw new Error('not_configured')\r\n    }\r\n}\r\n","import { readFile } from '../utils/commonUtils';\r\nimport { SyncTargets } from './Syncer';\r\nimport { Metadata, ICloudConnector } from './Syncer';\r\nimport DropboxClient from './DropboxClient'\r\n\r\nconst CLIENT_ID = 'lxn28fv9hhsn7id'\r\n\r\nconst DATA_FOLDER_PATH = '/data'\r\nconst METADATA_FILE_PATH = '/metadata.json'\r\nconst MAX_EXPORTS_NUMBER_TO_KEEP = 10\r\n\r\nexport default class DropboxConnector implements ICloudConnector {\r\n    private dropboxClient: DropboxClient\r\n\r\n    syncTarget = SyncTargets.Dropbox\r\n\r\n    constructor() {\r\n        this.dropboxClient = new DropboxClient(CLIENT_ID)\r\n    }\r\n\r\n    get authUrl(): string {\r\n        return this.dropboxClient.authUrl\r\n    }\r\n\r\n    get isConfigured(): boolean {\r\n        return this.dropboxClient.isConfigured\r\n    }\r\n\r\n    async authorize(authorizationCode?: string)  {\r\n        await this.dropboxClient.authorize(authorizationCode)\r\n    }\r\n\r\n    async check() {\r\n        await this.dropboxClient.check()\r\n    }\r\n\r\n    async uploadData(metadata: Metadata, taskList: string) {\r\n        await this.uploadMetadata(metadata)\r\n        await this.uploadTaskList(taskList)\r\n    }\r\n\r\n    async downloadMetadata(): Promise<Metadata> {        \r\n        try {\r\n            const response: any = await this.dropboxClient.downloadFile(METADATA_FILE_PATH)\r\n            const fileContent = await readFile(response.result.fileBlob)\r\n            return JSON.parse(fileContent as string)\r\n        } catch(e) {\r\n            return new Metadata()\r\n        }\r\n    }\r\n\r\n    async uploadMetadata(metadata: Metadata) {\r\n        const contents = JSON.stringify(metadata)\r\n        await this.dropboxClient.uploadFile(contents, METADATA_FILE_PATH)\r\n    }\r\n\r\n    async downloadTaskList(): Promise<string | null> {\r\n        try {\r\n            const latestExport = await this.getLatestExport()\r\n            const latestExportJson = await readFile(latestExport.fileBlob)\r\n            return latestExportJson as string           \r\n        } catch(e) {\r\n            console.error(e)\r\n            return null\r\n        }\r\n    } \r\n    \r\n    async uploadTaskList(taskList: string) {\r\n        if (!taskList) return\r\n\r\n        const path = `${DATA_FOLDER_PATH}/tasklist_${new Date().toISOString()}.json`\r\n        await this.dropboxClient.uploadFile(taskList, path)\r\n\r\n        await this.deleteOldestExports()\r\n    }\r\n\r\n    private async getSortedExports(): Promise<any[]> {\r\n        const response: any = await this.dropboxClient.listFolder(DATA_FOLDER_PATH)\r\n        return response.result.entries.sort((a: any, b: any) => {\r\n            const clientModifiedA = new Date(a.client_modified)\r\n            const clientModifiedB = new Date(b.client_modified)\r\n            if (clientModifiedA < clientModifiedB)\r\n                return -1\r\n            if (clientModifiedA > clientModifiedB)\r\n                return 1\r\n            return 0\r\n        })\r\n    }\r\n\r\n    private async getLatestExport() {\r\n        const sortedExports = await this.getSortedExports()\r\n        const path = sortedExports.pop().path_lower\r\n        const response: any = await this.dropboxClient.downloadFile(path)\r\n        return response.result\r\n    }\r\n\r\n    private async deleteOldestExports() {\r\n        const sortedExports = await this.getSortedExports()\r\n\r\n        for (let i = 0; i < sortedExports.length - MAX_EXPORTS_NUMBER_TO_KEEP; i++) {            \r\n            await this.dropboxClient.deleteFile(sortedExports[i].path_lower)\r\n        }\r\n    }\r\n}\r\n","import { SyncTargets } from '../classes/Syncer';\r\n\r\nexport const saveToLocalStorage = (updatedAt: number, taskList: string | null): void => {\r\n    if (!taskList) return\r\n    setLsUpdatedAt(updatedAt)\r\n    setLsTaskList(taskList)\r\n}\r\n\r\nexport const getLsUpdatedAt = (): number => {\r\n    const item = localStorage.getItem('updatedAt')\r\n    return item ? parseInt(item) : 0\r\n}\r\n\r\nexport const setLsUpdatedAt = (updatedAt: number): void => {\r\n    localStorage.setItem('updatedAt', updatedAt.toString())\r\n}\r\n\r\nexport const getLsTaskList = (): string | null => {\r\n    const item = localStorage.getItem('taskList')\r\n    return (item && item !== '=> {}') ? item : null\r\n}\r\n\r\nexport const setLsTaskList = (taskList: string): void => {\r\n    localStorage.setItem('taskList', taskList)\r\n}\r\n\r\nexport const getSyncTarget = (): SyncTargets => {\r\n    return localStorage.getItem('syncTarget') as SyncTargets\r\n}\r\n\r\nexport const setSyncTarget = (syncTarget: SyncTargets): void => {\r\n    localStorage.setItem('syncTarget', syncTarget)\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport './Banner.scss'\r\nimport { MdClose } from 'react-icons/md'\r\nimport { Events, useSubscribe } from '../../classes/Store'\r\n\r\nconst Banner = () => {\r\n    const [ banner, setBanner ] = useState<IBanner | null>(null)\r\n\r\n    const show = (banner: IBanner) => setBanner(banner)\r\n    const hide = () => setBanner(null)\r\n\r\n    useSubscribe(Events.ShowBanner, show)\r\n\r\n    useEffect(() => {\r\n        if (banner && banner.delay && banner.delay > 0) {\r\n            setTimeout(hide, banner.delay * 1000)\r\n        }\r\n    }, [banner])\r\n\r\n    if (!banner) return null\r\n\r\n    const { text, type } = banner\r\n\r\n    return (\r\n        <div className={`banner banner-${type}`}>\r\n            <div>{text}</div>\r\n            <MdClose onClick={hide} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n\r\nexport interface IBanner {\r\n    text: string\r\n    type: BannerTypes\r\n    delay?: number\r\n}\r\n\r\nexport enum BannerTypes {\r\n    Success = \"success\",\r\n    Warning = \"warning\",\r\n    Failure = \"failure\"\r\n}\r\n\r\nexport class FailureBanner implements IBanner {\r\n    text: string\r\n    type: BannerTypes\r\n\r\n    constructor(text: string) {\r\n        this.text = text\r\n        this.type = BannerTypes.Failure\r\n    }\r\n}\r\n\r\nexport class SuccessBanner implements IBanner {\r\n    text: string\r\n    type: BannerTypes\r\n    delay: number\r\n\r\n    constructor(text: string, delay: number = 5) {\r\n        this.text = text\r\n        this.type = BannerTypes.Success\r\n        this.delay = delay\r\n    }\r\n}\r\n","import { memo, useEffect, useRef } from 'react'\r\nimport './Record.scss'\r\nimport Task from '../../classes/Task'\r\nimport { MdAdd } from 'react-icons/md'\r\nimport { createTask, selectTask } from '../../classes/Store'\r\n \r\nconst AddRecord = ({ root }: { root: Task }) => {\r\n    const editableRef = useRef<HTMLDivElement>(null)\r\n\r\n    useEffect(() => {\r\n        !window.iAmRunningOnMobile && editableRef.current?.focus()\r\n    }, [])\r\n    \r\n    const createRecord = (e: any) => {\r\n        const taskText = e.target.textContent.trim()\r\n        if (!taskText) return\r\n        const task: Task = new Task(taskText, root)\r\n        task.isNew = true\r\n        createTask(task)\r\n        task.isProject && selectTask(task)\r\n        e.target.textContent = ''\r\n    }\r\n\r\n    return (  \r\n        <div className=\"record add-record\">\r\n            <div className=\"row-btns\">\r\n                <MdAdd />\r\n            </div>\r\n            <div \r\n                className=\"item-content\" \r\n                contentEditable=\"true\"\r\n                suppressContentEditableWarning={true}\r\n                onInput={createRecord}\r\n                onKeyPress={preventEnterOnEmpty}\r\n                ref={editableRef}\r\n            ></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst preventEnterOnEmpty = (e: any) => {\r\n    !e.target.textContent.trim() && e.key === 'Enter' && e.preventDefault()\r\n}\r\n\r\nexport default memo(AddRecord)\r\n","import RecordList from './RecordList'\r\nimport Task from '../../classes/Task'\r\n\r\ntype Props = { task: Task }\r\n\r\nconst SubTaskList = ({ task }: Props) => {\r\n    return (\r\n        <RecordList \r\n            classNames={['subtasks-list']}\r\n            root={task}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SubTaskList","import './Button.scss'\r\nimport { MdCheckBoxOutlineBlank, MdCheckBox } from 'react-icons/md'\r\n\r\ntype Props = {\r\n    actionOnClick: (e: any) => void\r\n    isChecked?: boolean,\r\n    priority: number\r\n}\r\n\r\nconst CheckmarkButton = (props: Props) => {\r\n    const {\r\n        actionOnClick,\r\n        isChecked = false,\r\n        priority\r\n    } = props\r\n\r\n    const classes = [ \r\n        'common-btn', \r\n        'checkmark-btn', \r\n        isChecked ? 'prio-0' : 'prio-' + priority \r\n    ].join(' ')\r\n\r\n    return (\r\n        <>\r\n            {isChecked\r\n                ? <MdCheckBox \r\n                    className={classes} \r\n                    onClick={actionOnClick}\r\n                />\r\n                : <MdCheckBoxOutlineBlank \r\n                    className={classes} \r\n                    onClick={actionOnClick}\r\n                />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CheckmarkButton\r\n","import { useState, useRef } from \"react\"\r\nimport { RiDeleteBin7Fill, RiDeleteBinFill } from 'react-icons/ri'\r\nimport { MdCheck, MdClose } from \"react-icons/md\"\r\nimport { useOutsideClickDetector } from '../../utils/customHooks'\r\nimport Task from \"../../classes/Task\"\r\nimport { deleteCompletedSubtasks, deleteTask } from \"../../classes/Store\"\r\n\r\ntype Props = {\r\n    task: Task,\r\n    isBulk?: boolean,\r\n    isDisabled?: boolean,\r\n    closeMenu?: () => void\r\n}\r\n\r\nconst DeleteRecords = (props: Props) => {\r\n    const { \r\n        task, \r\n        isBulk = false, \r\n        isDisabled = false,\r\n        closeMenu = () => {}\r\n     } = props\r\n     \r\n    const [ showDeleteConfirmation, setShowDeleteConfirmation ] = useState(false)\r\n\r\n    const deleteRecord = () => {\r\n        setShowDeleteConfirmation(false)\r\n        deleteTask(task)\r\n    }\r\n\r\n    const deleteCompleted = () => {\r\n        setShowDeleteConfirmation(false)\r\n        deleteCompletedSubtasks(task)\r\n        closeMenu()\r\n    }\r\n\r\n    const openDeleteConfirmation = (e: any) => {\r\n        e && e.stopPropagation()\r\n        setShowDeleteConfirmation(true)\r\n    }\r\n\r\n    const closeDeleteConfirmation = (e: any) => {\r\n        e && e.stopPropagation()\r\n        setShowDeleteConfirmation(false)\r\n    }\r\n\r\n    const confirmRef = useRef(null)\r\n    useOutsideClickDetector(confirmRef, closeDeleteConfirmation, showDeleteConfirmation)\r\n\r\n    const configSingle = {\r\n        icon: <RiDeleteBin7Fill />,\r\n        text: 'Delete',\r\n        tooltip: 'Delete task',\r\n        deleteAction: deleteRecord\r\n    }\r\n    \r\n    const configBulk = {\r\n        icon: <RiDeleteBinFill />,\r\n        text: 'Clear',\r\n        tooltip: 'Delete completed subtasks',\r\n        deleteAction: deleteCompleted\r\n    }\r\n\r\n    const { \r\n        icon, \r\n        text, \r\n        tooltip, \r\n        deleteAction \r\n    } = isBulk ? configBulk : configSingle\r\n\r\n    const classNames = [ 'record-menu-row' ]\r\n    isDisabled && classNames.push('disabled')\r\n\r\n    return (\r\n        <>\r\n            {showDeleteConfirmation \r\n                ?\r\n                <div className=\"record-menu-row\" ref={confirmRef}>\r\n                    <div className=\"inline-menu-btn\">\r\n                        <MdCheck onClick={deleteAction} />\r\n                    </div>\r\n                    <div className=\"inline-menu-btn\">\r\n                        <MdClose onClick={closeDeleteConfirmation} />\r\n                    </div>\r\n                </div>\r\n                :\r\n                <div \r\n                    onClick={openDeleteConfirmation} \r\n                    title={tooltip} \r\n                    className={classNames.join(' ')}\r\n                >\r\n                    {icon}\r\n                    <div className=\"menu-item-text\">{text}</div>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DeleteRecords\r\n","import { useState, useRef } from 'react'\r\nimport Task, { Priorities } from '../../classes/Task'\r\nimport { RiFilePptFill } from 'react-icons/ri'\r\nimport { useOutsideClickDetector } from '../../utils/customHooks'\r\n\r\nconst PRIORITY_NAMES = new Map([\r\n    [Priorities.Trivial, 'Trivial'],\r\n    [Priorities.Minor, 'Minor'],\r\n    [Priorities.Normal, 'Normal'],\r\n    [Priorities.Major, 'Major'],\r\n    [Priorities.Critical, 'Critical'],\r\n    [undefined, 'Trivial'],\r\n])\r\n\r\ntype Props = { \r\n    task: Task,\r\n    closeMenu: () => void\r\n}\r\n\r\nconst Priority = (props: Props) => {\r\n    const {\r\n        task,\r\n        closeMenu\r\n    } = props\r\n\r\n    const [ showSelector, setShowSelector ] = useState(false)\r\n\r\n    const openSelector = (e: any) => {\r\n        e.stopPropagation()\r\n        setShowSelector(true)\r\n    }\r\n    const closeSelector = () => setShowSelector(false)\r\n\r\n    const switchRef = useRef(null)\r\n    useOutsideClickDetector(switchRef, closeSelector, showSelector)\r\n\r\n    const handleClickOnSwitch = (e: any) => {\r\n        e.stopPropagation()\r\n\r\n        const el = e.target as HTMLDivElement   \r\n        const newPrio = parseInt(el.textContent!)     \r\n        if (newPrio !== task.priority) {\r\n            task.priority = newPrio\r\n        }\r\n        closeMenu() \r\n    }\r\n\r\n    return (\r\n        <>\r\n            {showSelector \r\n                ? <div \r\n                    className=\"record-menu-row priority-switch\" \r\n                    onClick={handleClickOnSwitch}\r\n                    ref={switchRef} \r\n                >\r\n                    <div className=\"inline-menu-btn\"><div>{Priorities.Trivial}</div></div>\r\n                    <div className=\"inline-menu-btn\"><div>{Priorities.Minor}</div></div>\r\n                    <div className=\"inline-menu-btn\"><div>{Priorities.Normal}</div></div>\r\n                    <div className=\"inline-menu-btn\"><div>{Priorities.Major}</div></div>\r\n                    <div className=\"inline-menu-btn\"><div>{Priorities.Critical}</div></div>\r\n                </div> \r\n                : <div \r\n                    className=\"record-menu-row\" \r\n                    onClick={openSelector} \r\n                    title=\"Set task priotity\"\r\n                >\r\n                    <RiFilePptFill className=\"menu-item-icon\" />\r\n                    <div className=\"menu-item-text\">\r\n                        {PRIORITY_NAMES.get(task.priority)}\r\n                    </div>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Priority\r\n","import { RiFileAddFill } from 'react-icons/ri'\r\n\r\ntype Props = {\r\n    closeMenu: () => void\r\n    showSubtasks: () => void\r\n    isDisabled?: boolean\r\n}\r\n\r\nconst AddSubtask = ({ closeMenu, showSubtasks, isDisabled = false }: Props) => {\r\n    const handleClickOnAddSubtask = () => {\r\n        closeMenu()\r\n        showSubtasks()\r\n    }\r\n\r\n    const classes = [\r\n        'record-menu-row',\r\n        isDisabled ? 'disabled' : ''\r\n    ].join(' ')\r\n\r\n    return (\r\n        <div \r\n            className={classes}\r\n            title=\"Add subtask\" \r\n            onClick={handleClickOnAddSubtask}\r\n        >\r\n            <RiFileAddFill className=\"menu-item-icon\" />\r\n            <div className=\"menu-item-text\">Add</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddSubtask\r\n","import { useRef, useState } from 'react'\r\nimport { MdMoreVert } from \"react-icons/md\"\r\nimport Task from '../../classes/Task'\r\nimport { useOutsideClickDetector } from '../../utils/customHooks'\r\nimport DeleteRecords from './DeleteRecords'\r\nimport Priority from './Priority'\r\nimport './RecordMenu.scss'\r\nimport AddSubtask from './AddSubtask'\r\n\r\ntype Props = {\r\n    task: Task,\r\n    classes?: string[],\r\n    showSubtasks: () => void,\r\n    isProject: boolean\r\n}\r\n\r\nconst RecordMenu = (props: Props) => {\r\n    const {\r\n        task,\r\n        classes = [],\r\n        showSubtasks,\r\n        isProject\r\n    } = props\r\n\r\n    const [ showMenu, setShowMenu ] = useState(false)\r\n\r\n    const openMenu = (e: any) => {\r\n        e.stopPropagation() // prevent task selection on click\r\n        setShowMenu(true)\r\n    }\r\n\r\n    const closeMenu = () => setShowMenu(false)\r\n\r\n    const menuRef = useRef(null)\r\n    useOutsideClickDetector(menuRef, closeMenu, showMenu)\r\n\r\n    let closeTimeout: any\r\n    const handleMouseLeave = () => {\r\n        closeTimeout = setTimeout(closeMenu, 500)\r\n    }\r\n    const handleMouseEnter = () => {\r\n        clearTimeout(closeTimeout)\r\n    }\r\n    \r\n    const hasSubtasks = !!task.tasks.length\r\n\r\n    const hasCompleted = !!task.tasks.filter((it) => it.isDone).length\r\n\r\n    const isRoot = !!!task.parent\r\n\r\n    return (\r\n        <div className={'record-menu-box ' + classes.join(' ')}>\r\n            <MdMoreVert className=\"common-btn\" onClick={openMenu} />\r\n            {showMenu && <div \r\n                className=\"record-menu\"\r\n                ref={menuRef} \r\n                onMouseLeave={handleMouseLeave}\r\n                onMouseEnter={handleMouseEnter}\r\n            >\r\n                {!task.isDone && !isRoot && <Priority \r\n                    task={task} \r\n                    closeMenu={closeMenu} \r\n                />}\r\n                {!isProject && !task.isDone && !isRoot && <AddSubtask \r\n                    closeMenu={closeMenu}\r\n                    showSubtasks={showSubtasks}\r\n                    isDisabled={hasSubtasks}\r\n                />}\r\n                <DeleteRecords\r\n                    task={task} \r\n                    isBulk\r\n                    isDisabled={!hasCompleted || !hasSubtasks}\r\n                    closeMenu={closeMenu}\r\n                />\r\n                {!isRoot && <DeleteRecords task={task} />}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecordMenu\r\n","import { useRef, useEffect } from 'react'\r\nimport Task from '../../classes/Task'\r\n\r\ntype Props = { \r\n    task: Task, \r\n    isEditable: boolean,\r\n}\r\n\r\nconst Editable = ({ task, isEditable }: Props) => {\r\n    const { isNew, text } = task\r\n\r\n    const editableRef = useRef<HTMLDivElement>(null)\r\n\r\n    const caretPosRef = useRef<number | undefined>(undefined)\r\n\r\n    useEffect(() => {\r\n        if (isNew) {            \r\n            setContentEditable(true)\r\n            setCaretPosition(editableRef.current, text.length)\r\n            task.isNew = false\r\n            editableRef.current?.focus()\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (document.activeElement === editableRef.current) {\r\n            setCaretPosition(editableRef.current, caretPosRef.current)\r\n        }\r\n    })\r\n        \r\n    const setContentEditable = (flag: boolean) => {\r\n        const el = editableRef.current\r\n        el?.setAttribute('contenteditable', '' + flag)\r\n    }\r\n\r\n    const handleInput = debounceInput((text: string) => {\r\n        caretPosRef.current = getCaretPosition(editableRef.current)\r\n        task.text = text\r\n    })\r\n\r\n    const handleBlur = () => {\r\n        !isEditable && setContentEditable(false)\r\n    }\r\n\r\n    return (\r\n        <div \r\n            ref={editableRef}\r\n            className=\"item-content\"\r\n            contentEditable={isEditable}\r\n            suppressContentEditableWarning={true}\r\n            onInput={handleInput}\r\n            onBlur={handleBlur}\r\n        >\r\n            {text}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst debounceInput = (callback: (text: string) => void) => {\r\n    let timeout: any\r\n    return (e: any) => {\r\n        const text = e.target.innerText\r\n        clearTimeout(timeout)\r\n        timeout = setTimeout(() => callback(text), 700)\r\n    }\r\n}\r\n\r\nconst getCaretPosition = (el: HTMLElement | null): number | undefined => {\r\n    if (!el || !el.isContentEditable) return\r\n    let range\r\n    try {\r\n        range = document.getSelection()?.getRangeAt(0)\r\n    } catch(err) {\r\n        // do nothing\r\n    }\r\n    if (!range) return\r\n    let rangeClone = range.cloneRange()\r\n    rangeClone.selectNodeContents(el)\r\n    rangeClone.setEnd(range.endContainer, range.endOffset)\r\n    return rangeClone.toString().length\r\n}\r\n\r\nconst setCaretPosition = (el: HTMLElement | null, pos?: number): void => {\r\n    if (!el) return\r\n    const range = document.createRange()\r\n    const selection = window.getSelection()\r\n    const elContentNode = el.childNodes[0]\r\n    if (!elContentNode || !elContentNode.textContent) return\r\n    const textLength = elContentNode.textContent.length\r\n    const positionNormalized = pos !== undefined \r\n        ? Math.min(pos, textLength) \r\n        : textLength\r\n    range.setStart(elContentNode, positionNormalized)\r\n    range.collapse()\r\n    selection?.removeAllRanges()\r\n    selection?.addRange(range)\r\n}\r\n\r\nexport default Editable\r\n","import React, { useState, memo } from 'react'\r\nimport './Record.scss'\r\nimport Task from '../../classes/Task'\r\nimport SubTaskList from '../RecordList/SubTaskList'\r\nimport CheckmarkButton from '../Buttons/CheckmarkButton'\r\n import { MdExpandLess, MdExpandMore } from 'react-icons/md'\r\n\r\nimport RecordMenu from '../RecordMenu/RecordMenu'\r\nimport Editable from './Editable'\r\nimport { useSubscribeWithForceUpdate } from '../../classes/Store'\r\nimport { selectTask } from '../../classes/Store'\r\n\r\ntype Props = { \r\n    item: Task, \r\n    isEditable?: boolean,\r\n    isTitle?: boolean,\r\n    isSelected?: boolean\r\n}\r\n\r\nconst Record = (props: Props) => {\r\n    const {\r\n        isEditable = true,\r\n        isTitle = false,\r\n        isSelected = false,\r\n        item,\r\n        item: {\r\n            id, \r\n            isDone,\r\n            priority, \r\n            parent\r\n        }\r\n    } = props\r\n\r\n    useSubscribeWithForceUpdate(item.id)\r\n\r\n    const hasSubtasks = !!item.tasks.length\r\n\r\n    const isProject = !!!item.parent?.parent\r\n\r\n    const [ showSubtasks, setShowSubtasks ] = useState(item.isOpened && hasSubtasks)\r\n\r\n    const handleClickOnRecord = () => { \r\n        if (isProject && parent && parent!.selectedSubTaskId !== id) {\r\n            selectTask(item)\r\n        }\r\n    }\r\n\r\n    const handleClickOnCheckbox = (e: any) => {\r\n        e.stopPropagation()\r\n        if (e.button === 0) { // left click only\r\n            item.isDone = !item.isDone\r\n        }\r\n    }\r\n\r\n    const recordClassName = [\r\n        'record', \r\n        isSelected ? 'record-selected' : '',\r\n        !isEditable ? 'read-only' : '',\r\n        isTitle ? 'title' : '',\r\n        isProject? 'project' : '',\r\n        isDone ? 'item-done' : ''\r\n    ].join(' ')\r\n        \r\n    const hiddenBtnClassName = window.iAmRunningOnMobile ? '' : 'hidden-btn' \r\n\r\n    const openSubtasks = () => {\r\n        setShowSubtasks(true)\r\n        item.isOpened = true\r\n    }\r\n\r\n    const closeSubtasks = () => {\r\n        setShowSubtasks(false)\r\n        item.isOpened = false\r\n    }\r\n\r\n    const getSubtasksBtn = () => {\r\n        const classes = \"common-btn subtasks-btn\"\r\n        if (hasSubtasks && !showSubtasks) {\r\n            return <MdExpandMore onClick={openSubtasks} className={classes} />\r\n        }\r\n        if (showSubtasks) {\r\n            return <MdExpandLess onClick={closeSubtasks} className={classes} />\r\n        }\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div \r\n                className={recordClassName}\r\n                id={id} \r\n                onClick={handleClickOnRecord}\r\n            >\r\n                <div className=\"row-btns\">\r\n                    <CheckmarkButton \r\n                        actionOnClick={handleClickOnCheckbox} \r\n                        isChecked={isDone}\r\n                        priority={priority}\r\n                    />\r\n                </div>\r\n                <Editable task={item} isEditable={isEditable} />\r\n                {/* DEBUG: display task ID for each record  */}\r\n                {/* <span style={{fontSize: '10px'}}>{id}</span> */}\r\n                <div className=\"row-btns\">\r\n                    {getSubtasksBtn()}\r\n                    <RecordMenu \r\n                        task={item} \r\n                        showSubtasks={openSubtasks}\r\n                        classes={[ hiddenBtnClassName ]}\r\n                        isProject={isProject}\r\n                    /> \r\n                </div>\r\n            </div>\r\n            {showSubtasks && <SubTaskList task={item} />}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Record)\r\n","import { useRef } from 'react'\r\nimport AddRecord from '../Record/AddRecord'\r\nimport Task, { Priorities } from '../../classes/Task'\r\nimport Record from '../Record/Record'\r\nimport './RecordList.scss'\r\nimport { useSubscribeWithForceUpdate } from '../../classes/Store'\r\n\r\ntype Props = { \r\n    classNames?: string[],\r\n    root: Task,\r\n    hasTitle?: boolean,\r\n    isEditable?: boolean\r\n}\r\n\r\nconst RecordList = (props: Props) => {\r\n    const {\r\n        classNames = [],\r\n        root,\r\n        hasTitle = false,\r\n        isEditable = true\r\n    } = props\r\n\r\n    const { tasks } = root\r\n\r\n    useSubscribeWithForceUpdate(root.id)\r\n\r\n    // sort subtask by priority\r\n    const setAndCompare = (a: Task, b: Task) => {\r\n        const pa = a.priority || Priorities.Trivial\r\n        const pb = b.priority || Priorities.Trivial\r\n\r\n        if (pa > pb) return -1\r\n        if (pa < pb) return 1\r\n        return 0\r\n    }\r\n    tasks.sort(setAndCompare)\r\n\r\n    const activeTasks = tasks.filter((t: Task) => !t.isDone)\r\n    const completedTasks = tasks.filter((t: Task) => t.isDone)\r\n\r\n    const activeItemListRef = useRef<HTMLDivElement>(null)\r\n\r\n    return (\r\n        <div className={classNames.join(' ')}>\r\n            {hasTitle && \r\n                <>\r\n                    <Record \r\n                        item={root} \r\n                        isTitle\r\n                        isEditable={isEditable}\r\n                    />\r\n                </>\r\n            }\r\n            <div className=\"active-tasks\" ref={activeItemListRef}>\r\n                {activeTasks.map(\r\n                    (task: Task) => \r\n                        <Record \r\n                            key={task.id} \r\n                            item={task}\r\n                            isEditable={isEditable}\r\n                            isSelected={root.selectedSubTaskId === task.id && !root.parent}\r\n                        />\r\n                )}\r\n            </div>\r\n            <AddRecord root={root}/>\r\n            {!!completedTasks.length && <div className=\"completed-tasks\">\r\n                {completedTasks.map(\r\n                    (task: Task) => \r\n                        <Record \r\n                            key={task.id}\r\n                            item={task}\r\n                            isEditable={isEditable}\r\n                            isSelected={root.selectedSubTaskId === task.id && !root.parent}\r\n                        />\r\n                )}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecordList\r\n","import RecordList from './RecordList'\r\nimport Task from '../../classes/Task'\r\n\r\ntype Props = { rootTask: Task }\r\n\r\nconst ProjectList = ({ rootTask }: Props ) => {\r\n    return (\r\n        <RecordList \r\n            classNames={['project-list']}\r\n            root={rootTask}\r\n            hasTitle\r\n            isEditable={false}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ProjectList\r\n","import { useRef } from 'react'\r\nimport { useOutsideClickDetector } from '../../utils/customHooks'\r\nimport taskStore from '../../classes/Store'\r\nimport Fog from '../Fog/Fog'\r\nimport ProjectList from '../RecordList/ProjectList'\r\nimport './Sidebar.scss'\r\nimport { BsBoxArrowLeft } from 'react-icons/bs'\r\n\r\ntype Props = {\r\n    isOpened: boolean,\r\n    close: () => void,\r\n    isSettingsOpened: boolean\r\n}\r\n\r\nconst Sidebar = ({ isOpened, close, isSettingsOpened }: Props) => {\r\n    const { taskList } = taskStore\r\n\r\n    const leftPanelRef = useRef(null)\r\n    useOutsideClickDetector(leftPanelRef, close, isOpened) \r\n\r\n    const handleClick = (e: any) => {\r\n        const el = e.target as HTMLDivElement        \r\n        if (el.getAttribute('contenteditable') === \"false\") close()\r\n    }\r\n\r\n    const classes = [\r\n        'left-panel',\r\n        isOpened ? 'panel-opened' : '',\r\n        isSettingsOpened? 'no-scroll' : ''\r\n    ].join(' ')\r\n\r\n    return (\r\n        <div ref={leftPanelRef} className={classes} onClick={handleClick}>\r\n            <Fog isDisplayed={isSettingsOpened} />\r\n                <div className=\"top-panel\">\r\n                    <div className=\"row-btns\">\r\n                        <BsBoxArrowLeft \r\n                            onClick={close}\r\n                            className=\"common-btn close-menu-btn\"\r\n                            title=\"hide projects list\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            <ProjectList rootTask={taskList} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import Task from '../classes/Task';\r\n\r\nexport enum DataTypes {\r\n    JSON = 'json',\r\n    HTML = 'html'\r\n}\r\n\r\nexport const convertDataToJsonString = (taskList: Task): string => {\r\n    const excludeKeys = [\r\n        'path',\r\n        'selectedSubTaskPath',\r\n        'parent'\r\n    ]\r\n    const replacer = (key: string, value: any) =>\r\n        excludeKeys.includes(key) ? undefined : value\r\n\r\n    return JSON.stringify(taskList, replacer, 2)\r\n}\r\n\r\nexport const convertDataToHtmlString = (taskList: Task): string => {\r\n    const textDecoration = taskList.isDone \r\n        ? 'style=\"text-decoration: line-through\"' : ''\r\n    const subtasks = taskList.tasks.length \r\n        ? `<ul>${taskList.tasks.map(task => convertDataToHtmlString(task))}</ul>` : ''\r\n    const item = `<li ${textDecoration}>${taskList.text + subtasks}</li>` \r\n    return item.replace(/>,</g, '><')\r\n}\r\n\r\nexport const getExportFileName = (type: DataTypes) => {\r\n    const timestamp = new Date().toISOString()\r\n    return `todolist_export_${timestamp}.${type}`\r\n}\r\n\r\nexport const getExportFileNameJson = () => getExportFileName(DataTypes.JSON)\r\n\r\nexport const isExportedData = (data: any): data is Task => {\r\n    if (!data) return false\r\n    const dataToValidate = data as Task\r\n    return dataToValidate.text !== undefined\r\n            && dataToValidate.isDone !== undefined \r\n            && dataToValidate.tasks !== undefined \r\n}\r\n\r\nexport const validateExportedData = (data: any): boolean => {\r\n    if (!isExportedData(data)) return false\r\n    return validateTaks(data)\r\n}\r\n\r\nconst isTask = (data: any): data is Task => {\r\n    const dataToValidate = data as Task\r\n    return dataToValidate.text !== undefined \r\n            && dataToValidate.isDone !== undefined \r\n            && dataToValidate.tasks !== undefined\r\n}\r\n\r\nconst validateTaks = (data: any): boolean => {\r\n    if (!isTask(data)) return false\r\n    for (let task of data.tasks) {\r\n        if(!validateTaks(task)) return false;\r\n    }\r\n    return true\r\n} \r\n","import { memo } from 'react'\r\nimport './Button.scss'\r\nimport { MdMenu } from 'react-icons/md'\r\n\r\ntype Props = {\r\n    action: () => void\r\n    classNames?: string[]\r\n    title?: string\r\n}\r\n\r\nconst MenuButton = (props: Props) => {\r\n    const {\r\n        action,\r\n        classNames = [],\r\n        title = ''\r\n    } = props\r\n\r\n    const handleClick = (e: any) => {\r\n        e.stopPropagation()\r\n        action()\r\n    }\r\n\r\n    return (\r\n        <MdMenu \r\n            className={`common-btn ${classNames.join(' ')}`} \r\n            onClick={handleClick}\r\n            title={title}\r\n        />\r\n    )\r\n}\r\n\r\nexport default memo(MenuButton)\r\n","import './NoProjects.scss'\r\nimport { MdCheckBoxOutlineBlank } from 'react-icons/md'\r\n\r\nconst NoProjects = () => {\r\n    return (\r\n        <div className=\"no-projects-message\">\r\n            <MdCheckBoxOutlineBlank />\r\n            <span>Know thyself!</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoProjects\r\n","import Task from '../../classes/Task'\r\nimport RecordList from './RecordList'\r\nimport taskStore, { useSubscribeWithForceUpdate } from '../../classes/Store'\r\n\r\nconst TaskList = () => {\r\n\r\n    const root = taskStore.taskList\r\n\r\n    useSubscribeWithForceUpdate(root.id)\r\n\r\n    // select project to display\r\n    const projects = root.tasks\r\n    const selectedProject = projects.length \r\n        ? projects.find((task: Task) => task.id === root.selectedSubTaskId) || projects[0]\r\n        : null\r\n    if (!root.selectedSubTaskId && selectedProject) {\r\n        root.selectedSubTaskId = selectedProject.id\r\n    }\r\n\r\n    if (!selectedProject) return null\r\n\r\n    return (\r\n        <RecordList \r\n            classNames={['task-list']}\r\n            root={selectedProject}\r\n            hasTitle\r\n        />\r\n    )\r\n}\r\n\r\nexport default TaskList\r\n","import { useEffect } from \"react\"\r\nimport { createPortal } from \"react-dom\"\r\n\r\ntype Props = { children: any }\r\n\r\nconst Portal = ({ children }: Props) => {\r\n  const mountPoint = document.getElementById(\"portal-root\")\r\n  const el = document.createElement(\"div\")\r\n\r\n  useEffect(() => {\r\n    mountPoint!.appendChild(el)\r\n\r\n    return () => {\r\n        mountPoint!.removeChild(el)\r\n    }\r\n  }, [el, mountPoint])\r\n\r\n  return createPortal(children, el)\r\n};\r\n\r\nexport default Portal","import './withModal.scss'\r\nimport Fog from '../components/Fog/Fog'\r\n\r\nconst withModal = <P extends object>(WrapedComponent: React.ComponentType<P>) => {\r\n\r\n    return (props: any) => (\r\n        <>\r\n            <Fog isDisplayed={true} />\r\n            <div className=\"modal-container\">\r\n                <div className=\"modal-dialog\">\r\n                    <WrapedComponent {...props} />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withModal\r\n","import { forwardRef } from 'react'\r\nimport './Button.scss'\r\n\r\ntype Props = {\r\n    text: string\r\n    action: (e: any) => void\r\n    isOutlined?: boolean\r\n    classNames?: string[]\r\n}\r\n\r\nconst Button = (props: Props, ref?: React.ForwardedRef<HTMLButtonElement>) => {\r\n    const {\r\n        text,\r\n        action,\r\n        isOutlined = false,\r\n        classNames = []\r\n    } = props\r\n\r\n    const classes = [ \r\n        'button',\r\n        isOutlined ? 'outlined-btn' : 'filled-btn',\r\n        ...classNames\r\n    ].join(' ')\r\n    \r\n    return (\r\n        <button \r\n            className={classes}\r\n            onClick={action}\r\n            ref={ref}\r\n        >\r\n            {text}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default forwardRef(Button)\r\n","import withModal from \"../../HOCs/withModal\"\r\nimport { useEffect, useRef } from \"react\"\r\nimport Button from \"../Buttons/Button\"\r\n\r\ntype Props = {\r\n    onConfirm: () => void\r\n    onCancel: () => void\r\n}\r\n\r\nconst ImportModal = (props: Props) => {\r\n    const {\r\n        onConfirm,\r\n        onCancel\r\n    } = props\r\n\r\n    const cancelRef = useRef<HTMLButtonElement>(null)\r\n\r\n    useEffect(() => { setTimeout(() => cancelRef.current?.focus(), 0) })\r\n\r\n    return (\r\n        <>\r\n            <div>Do you want to overwrite existing data?</div>\r\n            <div className=\"modal-btns\">\r\n                <Button \r\n                    text='cancel' \r\n                    ref={cancelRef} \r\n                    action={onCancel} \r\n                    isOutlined\r\n                    classNames={['central-btn']}\r\n                />\r\n                <Button \r\n                    text='ok' \r\n                    action={onConfirm} \r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withModal(ImportModal)\r\n","import { useRef, useState } from 'react'\r\nimport Task from '../../classes/Task'\r\nimport { FailureBanner, SuccessBanner } from '../Banner/Banner'\r\nimport { readFile } from '../../utils/commonUtils'\r\nimport { \r\n    convertDataToHtmlString,\r\n    convertDataToJsonString, \r\n    DataTypes, \r\n    getExportFileName,\r\n    validateExportedData\r\n} from '../../utils/persistDataUtils'\r\nimport taskStore, { actions } from '../../classes/Store'\r\nimport Portal from '../../HOCs/Portal'\r\nimport ImportModal from './ImportModal'\r\nimport Button from '../Buttons/Button'\r\n\r\ntype Props = {\r\n    backToTaskList(): void\r\n}\r\n\r\nconst ExportImport = (props: Props) => {\r\n    const [ showModal, setShowModal ] = useState(false)\r\n\r\n    const { taskList } = taskStore\r\n\r\n    const { backToTaskList } = props\r\n\r\n    const fileInputRef = useRef<HTMLInputElement>(null)\r\n\r\n    let dataType = DataTypes.JSON\r\n\r\n    const exportData = () => {\r\n        switch (dataType) {\r\n            case DataTypes.JSON:\r\n                exportDataAsJson(taskList)\r\n                break\r\n            case DataTypes.HTML:\r\n                exportDataAsHtml(taskList)\r\n                break\r\n            default:\r\n                exportDataAsJson(taskList)\r\n        }\r\n    }\r\n\r\n    const doImport = async () => {\r\n        let taskList: Task | null = null\r\n        try {\r\n            const files = fileInputRef.current?.files\r\n            if (files) {\r\n                const fileContent = await readFile(files[0])\r\n                taskList = JSON.parse(fileContent)\r\n                clearFileInput()\r\n                setShowModal(false)\r\n            }\r\n        } catch(err) {\r\n            setShowModal(false)\r\n            const banner = new FailureBanner('Failed to parse JSON file')\r\n            actions.showBanner(banner)\r\n            clearFileInput()\r\n            return\r\n        }\r\n        if (!validateExportedData(taskList)) {\r\n            const banner = new FailureBanner('Some required fields are missing')\r\n            actions.showBanner(banner)\r\n            return\r\n        }\r\n        taskStore.setData(taskList, Date.now())\r\n        \r\n        backToTaskList()\r\n        const banner = new SuccessBanner('Data successfully imported', 5)\r\n        actions.showBanner(banner)\r\n    }\r\n\r\n    const clickOnFileInput = () => {\r\n        const node = fileInputRef.current!\r\n        node.click()\r\n    }\r\n\r\n    const clearFileInput = () => {\r\n        const node = fileInputRef.current!\r\n        node.value = ''\r\n    }\r\n\r\n    const setDataType = (e: any) => {\r\n        dataType = e.target.value\r\n    }\r\n\r\n    const onModalConfirm = () => {\r\n        doImport()\r\n    }\r\n\r\n    const onModalCancel = () => {\r\n        clearFileInput()\r\n        setShowModal(false)\r\n    }\r\n\r\n    return (\r\n        <div className=\"settings-block\">\r\n            <h2>Import/Export your data</h2>\r\n            <Button text='export' action={exportData} />\r\n            <span className=\"words-between\">as</span>\r\n            <select className=\"data-types-select\" onChange={setDataType}>\r\n                <option value={DataTypes.JSON}>{DataTypes.JSON.toUpperCase()}</option>\r\n                <option value={DataTypes.HTML}>{DataTypes.HTML.toUpperCase()}</option>\r\n            </select>\r\n            <Button \r\n                text='import json' \r\n                action={clickOnFileInput} \r\n                classNames={['import-btn']} \r\n            />\r\n            <input \r\n                className=\"input-hidden\" \r\n                type=\"file\" \r\n                accept=\".json\" \r\n                onChange={() => setShowModal(true)} \r\n                ref={fileInputRef} \r\n            />\r\n            {showModal && \r\n            <Portal>\r\n                <ImportModal onCancel={onModalCancel} onConfirm={onModalConfirm} />\r\n            </Portal>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst doExport = (data: string, type: DataTypes) => {\r\n    const dataToExport = `data:text/${type};charset=utf-8,${data}`\r\n    const encodedUri = encodeURI(dataToExport)\r\n    const link = document.createElement('a')\r\n    link.setAttribute('href', encodedUri)\r\n    link.setAttribute('download', getExportFileName(type));\r\n    link.click();\r\n}\r\n\r\nconst exportDataAsJson = (root: Task) => {\r\n    doExport(convertDataToJsonString(root), DataTypes.JSON)\r\n}\r\n\r\nconst exportDataAsHtml = (root: Task) => {\r\n    const content = convertDataToHtmlString(root)\r\n    const styles = 'body { font-family: sans-serif; font-size: 16px; } ul, li { margin-top: 6px }'\r\n    const data = `<html><head><style>${styles}</style></head><body>${content}</body></html>`\r\n    doExport(data, DataTypes.HTML)\r\n}\r\n\r\nexport default ExportImport\r\n","import { useRef } from 'react'\r\nimport DropboxConnector from '../../classes/DropboxConnector'\r\nimport { FailureBanner, SuccessBanner } from '../Banner/Banner'\r\nimport syncer, { SyncSources } from '../../classes/Syncer'\r\nimport { GoArrowRight } from \"react-icons/go\";\r\nimport Button from '../Buttons/Button'\r\nimport { actions } from '../../classes/Store'\r\n\r\ntype Props = { source: SyncSources }\r\n\r\nconst DropboxSettings = ({ source }: Props) => {\r\n    const dbx = new DropboxConnector()\r\n\r\n    const authTokenRef = useRef<HTMLInputElement>(null)\r\n\r\n    const authorizeApp = async () => {\r\n        actions.showLoading()\r\n        try {\r\n            await dbx.authorize(authTokenRef.current?.value)\r\n\r\n            syncer.initSync(source, dbx)\r\n            const banner = new SuccessBanner('Application successfully authorized')\r\n            actions.showBanner(banner)\r\n        } catch(e) {\r\n            const banner = new FailureBanner('Error: ' + e.message)\r\n            actions.showBanner(banner)\r\n        }\r\n        actions.hideLoading()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3>\r\n                Connect Dropbox\r\n                {dbx.isConfigured\r\n                    ? <span className=\"is-authorized already-authorized\" title=\"Already configured\">\r\n                        &#10004;\r\n                    </span>\r\n                    : <span className=\"is-authorized not-authorized\" title=\"Not configured\">\r\n                        !\r\n                    </span>\r\n                }\r\n            </h3>\r\n            <div className=\"dropbox-flow\">\r\n                <Button text='get code' action={()=> window.open(dbx.authUrl, \"_blank\")} />\r\n                <GoArrowRight className=\"arrow-right\" />\r\n                <input \r\n                    type=\"text\" \r\n                    size={48} \r\n                    placeholder=\"insert authorizarion code here\"\r\n                    ref={authTokenRef}\r\n                    className=\"auth-code\"\r\n                />\r\n                <GoArrowRight className=\"arrow-right\" />\r\n                <Button text='authorize' action={authorizeApp} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DropboxSettings\r\n","import { useEffect, useRef } from \"react\"\r\nimport withModal from \"../../HOCs/withModal\"\r\nimport { SyncTargets } from \"../../classes/Syncer\"\r\nimport Button from \"../Buttons/Button\"\r\n\r\ntype Props = {\r\n    target: SyncTargets\r\n    onCancel: () => void\r\n    onLocal: () => void\r\n    onRemote: () => void\r\n}\r\n\r\nconst SyncModal = (props: Props) => {\r\n    const {\r\n        onCancel,\r\n        onLocal,\r\n        onRemote,\r\n    } = props\r\n\r\n    const cancelRef = useRef<HTMLButtonElement>(null)\r\n\r\n    useEffect(() => { setTimeout(() => cancelRef.current?.focus(), 0) })\r\n\r\n    return (\r\n        <>\r\n            <div>Select initial data source</div>\r\n            <div className=\"modal-btns\">\r\n                <Button \r\n                    text='cancel' \r\n                    ref={cancelRef} \r\n                    action={onCancel} \r\n                    isOutlined\r\n                />\r\n                <Button \r\n                    text='remote' \r\n                    action={onRemote}  \r\n                    classNames={['central-btn']}\r\n                />\r\n                <Button \r\n                    text='local' \r\n                    action={onLocal} \r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withModal(SyncModal)\r\n","import { useRef, useState } from 'react'\r\nimport Portal from '../../HOCs/Portal'\r\nimport * as lsUtils from '../../utils/localStorageUtils'\r\nimport syncer, { SyncSources, SyncTargets } from '../../classes/Syncer'\r\nimport { SyncStatuses } from '../Statuses/SyncStatus'\r\nimport DropboxSettings from './DropboxSettings'\r\nimport SyncModal from './SyncModal'\r\nimport { actions, Events, useSubscribe } from '../../classes/Store'\r\n\r\ninterface SyncOpts {\r\n    target: SyncTargets\r\n    dataSource: SyncSources | undefined\r\n}\r\n\r\nfunction SyncSettings() {\r\n    const initialState: SyncOpts = {\r\n        target: lsUtils.getSyncTarget(),\r\n        dataSource: undefined\r\n    }\r\n\r\n    const [ syncOpts, setSyncOpts ] = useState(initialState)\r\n\r\n    const [ showModal, setShowModal ] = useState(false)\r\n\r\n    const [ isSelectDisabled, setIsSelectDisabled ] = useState(false)\r\n\r\n    const targetRef = useRef<SyncTargets>(syncOpts.target)\r\n\r\n    const toggleTargetSelector = (status: SyncStatuses) => {\r\n        const flag = status === SyncStatuses.InProgress \r\n        setIsSelectDisabled(flag)\r\n    }\r\n\r\n    useSubscribe(Events.SetSyncStatus, toggleTargetSelector)\r\n\r\n    const getTargetSettingsElement = () => {\r\n        const { target, dataSource } = syncOpts\r\n        switch (target) {\r\n            case SyncTargets.Dropbox:\r\n                return <DropboxSettings source={dataSource!} />\r\n            default:\r\n                return null\r\n        }\r\n    }\r\n\r\n    const handleTargetChange = (e: any) => {\r\n        const value = e.target.value as SyncTargets\r\n        targetRef.current = value\r\n\r\n        if (value === SyncTargets.Disabled) {\r\n            setSyncOpts({ target: value, dataSource: undefined })\r\n            lsUtils.setSyncTarget(value)\r\n            actions.setSyncStatus(SyncStatuses.NotConfigured)\r\n            syncer.initSync()\r\n        } else {\r\n            setShowModal(true)\r\n        }\r\n    }\r\n\r\n    const initSyncWithTarget = (dataSource: SyncSources) => {\r\n        const target = targetRef.current\r\n        setSyncOpts({ target, dataSource })\r\n        lsUtils.setSyncTarget(target)\r\n        syncer.initSync(dataSource)\r\n        setShowModal(false)\r\n    }   \r\n    \r\n    const onModalLocal = () => {\r\n        initSyncWithTarget(SyncSources.Local)\r\n    }\r\n\r\n    const onModalRemote = () => {\r\n        initSyncWithTarget(SyncSources.Remote)\r\n    }\r\n\r\n    const onModalCancel = () => {\r\n        setShowModal(false)\r\n    }\r\n\r\n    return (\r\n        <div className=\"settings-block\">\r\n            <h2>Cloud Synchronization</h2>\r\n            <select \r\n                disabled={isSelectDisabled} \r\n                value={syncOpts.target} \r\n                onChange={handleTargetChange}\r\n            >\r\n                <option value={SyncTargets.Disabled}>Disabled</option>\r\n                <option value={SyncTargets.Dropbox}>Dropbox</option>\r\n            </select>\r\n            {getTargetSettingsElement()}\r\n            {showModal && \r\n            <Portal>\r\n                <SyncModal \r\n                    onCancel={onModalCancel} \r\n                    onLocal={onModalLocal} \r\n                    onRemote={onModalRemote} \r\n                />\r\n            </Portal>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SyncSettings\r\n","import './Settings.scss'\r\nimport ExportImport from './ExportImport' \r\nimport SyncSettings from './SyncSettings'\r\n\r\ntype Props = {\r\n    backToTaskList(): void\r\n}\r\n\r\nconst Settings = (props: Props) => {\r\n\r\n    const { backToTaskList } = props\r\n\r\n    return (\r\n        <div className=\"settings\">\r\n            <ExportImport backToTaskList={backToTaskList} />\r\n            <div className=\"divider\" />\r\n            <SyncSettings />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings\r\n","import Banner from '../Banner/Banner'\r\nimport MenuButton from '../Buttons/MenuButton'\r\nimport { RiSettingsLine } from 'react-icons/ri'\r\nimport Fog from '../Fog/Fog'\r\nimport NoProjects from '../NoProjects/NoProjects'\r\nimport TaskList from '../RecordList/TaskList'\r\nimport Settings from '../Settings/Settings'\r\nimport SyncStatus from '../Statuses/SyncStatus'\r\nimport taskStore from '../../classes/Store'\r\nimport { BsBoxArrowLeft } from 'react-icons/bs'\r\n\r\ntype Props = {\r\n    isSidebarOpened: boolean,\r\n    isSettingsOpened: boolean,\r\n    openSidebar: () => void,\r\n    toggleSettings: () => void\r\n}\r\n\r\nconst Content = (props: Props) => {\r\n    const { \r\n        isSettingsOpened, \r\n        isSidebarOpened, \r\n        openSidebar,\r\n        toggleSettings\r\n    } = props\r\n\r\n    const { taskList } = taskStore\r\n\r\n    const hasData = !!taskList.tasks.length\r\n\r\n    return (\r\n        <div className=\"right-panel\">\r\n            <Fog isDisplayed={isSidebarOpened} />\r\n            <Banner />\r\n            <div className=\"top-panel\">\r\n                {!isSettingsOpened &&\r\n                    <div className=\"row-btns\">\r\n                        <MenuButton \r\n                            action={openSidebar} \r\n                            classNames={['open-menu-btn']}\r\n                            title=\"open projects list\"\r\n                        />\r\n                    </div>\r\n                }\r\n                <div className=\"row-btns\">\r\n                    <SyncStatus />\r\n                    {isSettingsOpened \r\n                        ? <BsBoxArrowLeft \r\n                            className=\"common-btn close settings\"\r\n                            onClick={toggleSettings}\r\n                            title=\"close settings\"\r\n                          />\r\n                        : <RiSettingsLine \r\n                            className=\"common-btn \"\r\n                            onClick={toggleSettings}\r\n                            title=\"settings\"\r\n                          />\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"right-content\">\r\n                {isSettingsOpened \r\n                    ? <Settings backToTaskList={toggleSettings} />\r\n                    : <TaskList />\r\n                }\r\n            </div>\r\n            {!hasData && !isSettingsOpened && <NoProjects />} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Content\r\n","import { useEffect, useState } from 'react'\r\nimport './MainContainer.scss'\r\nimport Loading from '../Statuses/Loading'\r\nimport syncer from '../../classes/Syncer'\r\nimport Sidebar from '../Sidebar/Sidebar'\r\nimport Content from './Content'\r\nimport { Events, useSubscribeWithForceUpdate } from '../../classes/Store'\r\n\r\nconst MainContainer = () => {\r\n    const [ isSettingsOpened, setIsSettingsOpened ] = useState(false)\r\n\r\n    const [ isSidebarOpened, setIsSidebarOpened ] = useState(false)\r\n\r\n    useEffect(() => {\r\n        syncer.initSync()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    useSubscribeWithForceUpdate(Events.Reload)\r\n\r\n    const toggleSettings = () =>\r\n        setIsSettingsOpened(!isSettingsOpened)\r\n\r\n    const openSidebar = () => {\r\n        setIsSidebarOpened(true)        \r\n        !window.iAmRunningOnMobile && window.addEventListener('resize', closeSidebar)\r\n    }\r\n\r\n    const closeSidebar = () => {\r\n        setIsSidebarOpened(false)\r\n        window.removeEventListener('resize', closeSidebar)\r\n    }\r\n\r\n    return (\r\n        <div className={`main-container${isSidebarOpened ? ' sidebar-opened' : ''}`}>   \r\n            <Loading />\r\n            <Sidebar \r\n                isOpened={isSidebarOpened} \r\n                close={closeSidebar} \r\n                isSettingsOpened={isSettingsOpened}\r\n            />\r\n            <Content \r\n                isSettingsOpened={isSettingsOpened}\r\n                isSidebarOpened={isSidebarOpened}\r\n                toggleSettings={toggleSettings}\r\n                openSidebar={openSidebar}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainContainer\r\n","import MainContainer from './components/MainContainer/MainContainer';\r\nimport { isMobile } from './utils/commonUtils';\r\n\r\ndeclare global { interface Window { iAmRunningOnMobile: boolean } }\r\nwindow.iAmRunningOnMobile = isMobile()\r\n\r\nconst App = () => (\r\n    <>\r\n        <div id=\"portal-root\"></div>\r\n        <MainContainer />\r\n    </>\r\n)\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}